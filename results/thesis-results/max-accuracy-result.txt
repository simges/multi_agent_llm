SELECT COUNT(*) AS singer_count FROM singer;
SELECT COUNT(*) AS total_singers FROM singer;
SELECT Name, Country, Age FROM singer ORDER BY Age DESC;
SELECT Name, Country, Age FROM singer ORDER BY Age DESC;
SELECT AVG(Age) AS average_age, MIN(Age) AS min_age, MAX(Age) AS max_age FROM singer WHERE Country = 'France';
SELECT AVG(Age) AS Average_Age, MIN(Age) AS Minimum_Age, MAX(Age) AS Maximum_Age FROM singer WHERE Country = 'France';
SELECT Song_Name, Song_release_year FROM singer WHERE Age = (SELECT MIN(Age) FROM singer);
SELECT t1.Song_Name, t1.Song_release_year FROM singer AS t1 JOIN (SELECT MIN(Age) AS min_age FROM singer) AS t2 WHERE t1.Age = t2.min_age;
SELECT DISTINCT Country FROM singer WHERE Age > 20;
SELECT DISTINCT Country FROM singer WHERE Age > 20;
SELECT Country, COUNT(*) AS 'Number of Singers' FROM singer GROUP BY Country;
SELECT Country, COUNT(Singer_ID) AS Singer_Count FROM singer GROUP BY Country;
SELECT Song_Name FROM singer WHERE Age > (SELECT AVG(Age) FROM singer);
SELECT Song_Name FROM singer WHERE Age > (SELECT AVG(Age) FROM singer);
SELECT Location, Name FROM stadium WHERE Capacity >= 5000 AND Capacity <= 10000;
SELECT Location, Name FROM stadium WHERE Capacity >= 5000 AND Capacity <= 10000;
SELECT MAX(Capacity) AS max_capacity, AVG(Capacity) AS avg_capacity FROM stadium;
SELECT AVG(Capacity) AS Average_Capacity, MAX(Capacity) AS Maximum_Capacity FROM stadium;
SELECT Name, Capacity FROM stadium ORDER BY Average DESC LIMIT 1;
SELECT Name, Capacity FROM stadium WHERE Average = (SELECT MAX(Average) FROM stadium);
SELECT COUNT(*) AS concert_count FROM concert WHERE Year IN ('2014', '2015');
SELECT COUNT(*) FROM concert WHERE Year IN ('2014', '2015');
SELECT stadium.Name, COUNT(concert.concert_ID) AS Number_of_Concerts FROM stadium JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID GROUP BY stadium.Name;
SELECT s.Name, COUNT(c.concert_ID) AS concert_count FROM stadium s JOIN concert c ON s.Stadium_ID = c.Stadium_ID GROUP BY s.Name;
SELECT s.Name, s.Capacity FROM stadium AS s JOIN concert AS c ON s.Stadium_ID = c.Stadium_ID WHERE c.Year >= '2014' GROUP BY s.Stadium_ID ORDER BY COUNT(c.concert_ID) DESC LIMIT 1;
SELECT s.Name, s.Capacity FROM stadium AS s JOIN concert AS c ON s.Stadium_ID = c.Stadium_ID WHERE c.Year > '2013' GROUP BY s.Stadium_ID ORDER BY COUNT(c.concert_ID) DESC LIMIT 1;
SELECT Year, COUNT(concert_ID) AS concert_count FROM concert GROUP BY Year ORDER BY concert_count DESC LIMIT 1;
SELECT Year FROM concert GROUP BY Year ORDER BY COUNT(*) DESC LIMIT 1;
SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT DISTINCT Stadium_ID FROM concert);
SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert);
SELECT s1.Country FROM singer AS s1 JOIN singer AS s2 ON s1.Country = s2.Country WHERE s1.Age > 40 AND s2.Age < 30;
SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert WHERE Year = '2014');
SELECT Name FROM stadium WHERE Stadium_ID NOT IN (SELECT Stadium_ID FROM concert WHERE Year = '2014');
SELECT concert.concert_Name, concert.Theme, COUNT(DISTINCT singer_in_concert.Singer_ID) AS Number_of_Singers FROM concert JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID GROUP BY concert.concert_ID;
SELECT concert.concert_Name, concert.Theme, COUNT(singer_in_concert.Singer_ID) AS Number_of_Singers FROM concert JOIN singer_in_concert ON concert.concert_ID = singer_in_concert.concert_ID GROUP BY concert.concert_ID;
SELECT singer.Name, COUNT(singer_in_concert.concert_ID) AS Number_of_Concerts FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID GROUP BY singer.Name;
SELECT singer.Name, COUNT(singer_in_concert.concert_ID) AS Number_of_Concerts FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID GROUP BY singer.Name;
SELECT singer.Name FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID WHERE concert.Year = '2014';
SELECT singer.Name FROM singer JOIN singer_in_concert ON singer.Singer_ID = singer_in_concert.Singer_ID JOIN concert ON singer_in_concert.concert_ID = concert.concert_ID WHERE concert.Year = '2014';
SELECT singer.Name, singer.Country FROM singer WHERE 'Hey' IN (SELECT Song_Name FROM singer);
SELECT Name, Country FROM singer WHERE Song_Name LIKE '%Hey%';
SELECT s.Name, s.Location FROM stadium AS s JOIN concert AS c ON s.Stadium_ID = c.Stadium_ID WHERE c.Year IN ('2014', '2015') GROUP BY s.Stadium_ID HAVING COUNT(DISTINCT c.Year) = 2;
SELECT stadium.Name, stadium.Location FROM stadium JOIN concert ON stadium.Stadium_ID = concert.Stadium_ID WHERE concert.Year IN ('2014', '2015') GROUP BY stadium.Stadium_ID HAVING COUNT(DISTINCT concert.Year) = 2;
SELECT COUNT(*) AS concert_count FROM concert WHERE Stadium_ID = (SELECT Stadium_ID FROM stadium ORDER BY Capacity DESC LIMIT 1);
SELECT COUNT(c.concert_ID) AS concert_count FROM concert c JOIN stadium s ON c.Stadium_ID = s.Stadium_ID WHERE s.Capacity = (SELECT MAX(Capacity) FROM stadium);
SELECT COUNT(PetID) AS NumberOfPets FROM Pets WHERE weight > 10;
SELECT COUNT(*) FROM Pets WHERE weight > 10;
SELECT weight FROM Pets WHERE pet_age = (SELECT MIN(pet_age) FROM Pets WHERE PetType = 'dog') AND PetType = 'dog' LIMIT 1;
SELECT weight FROM Pets WHERE PetType = 'dog' ORDER BY pet_age ASC LIMIT 1;
SELECT PetType, MAX(weight) AS MaxWeight FROM Pets GROUP BY PetType;
SELECT PetType, MAX(weight) AS MaxWeight FROM Pets GROUP BY PetType;
SELECT COUNT(HP.PetID) AS NumberOfPets FROM Has_Pet HP JOIN Student S ON HP.StuID = S.StuID WHERE S.Age > 20;
SELECT COUNT(DISTINCT hp.PetID) AS PetCount FROM Has_Pet hp JOIN Student s ON hp.StuID = s.StuID WHERE s.Age > 20;
SELECT COUNT(p.PetID) AS NumberOfDogs FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE s.Sex = 'F' AND p.PetType = 'dog';
SELECT COUNT(*) AS dog_count FROM Student S JOIN Has_Pet HP ON S.StuID = HP.StuID JOIN Pets P ON HP.PetID = P.PetID WHERE S.Sex = 'F' AND P.PetType = 'dog';
SELECT COUNT(DISTINCT PetType) AS distinct_pet_types FROM Pets WHERE PetType IN ('cat', 'dog');
SELECT COUNT(DISTINCT PetType) AS distinct_pet_types FROM Pets;
SELECT DISTINCT Student.Fname FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType IN ('cat', 'dog');
SELECT Student.Fname FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType IN ('cat', 'dog');
SELECT DISTINCT s.Fname FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE p.PetType = 'cat' AND EXISTS (SELECT 1 FROM Has_Pet hp2 JOIN Pets p2 ON hp2.PetID = p2.PetID WHERE hp2.StuID = s.StuID AND p2.PetType = 'dog');
SELECT DISTINCT s.Fname FROM Student s JOIN Has_Pet hp ON s.StuID = hp.StuID JOIN Pets p ON hp.PetID = p.PetID WHERE p.PetType = 'cat' AND EXISTS (SELECT 1 FROM Has_Pet hp2 JOIN Pets p2 ON hp2.PetID = p2.PetID WHERE hp2.StuID = s.StuID AND p2.PetType = 'dog');
SELECT Student.Major, Student.Age FROM Student WHERE Student.StuID NOT IN (SELECT Has_Pet.StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'cat');
SELECT Student.Major, Student.Age FROM Student WHERE Student.StuID NOT IN (SELECT Has_Pet.StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'cat');
SELECT Student.StuID FROM Student WHERE Student.StuID NOT IN (SELECT Has_Pet.StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'cat');
SELECT DISTINCT S.StuID FROM Student S LEFT JOIN Has_Pet HP ON S.StuID = HP.StuID LEFT JOIN Pets P ON HP.PetID = P.PetID WHERE P.PetType != 'cat' OR HP.PetID IS NULL;
SELECT Student.Fname, Student.Age FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'dog' AND Student.StuID NOT IN (SELECT StuID FROM Has_Pet JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.PetType = 'cat');
SELECT DISTINCT S.Fname FROM Student S JOIN Has_Pet HP ON S.StuID = HP.StuID JOIN Pets P ON HP.PetID = P.PetID WHERE P.PetType = 'dog' AND S.StuID NOT IN (SELECT StuID FROM Has_Pet WHERE PetID IN (SELECT PetID FROM Pets WHERE PetType = 'cat'));
SELECT PetType, weight FROM Pets WHERE pet_age = (SELECT MIN(pet_age) FROM Pets);
SELECT PetType, weight FROM Pets WHERE pet_age = (SELECT MIN(pet_age) FROM Pets);
SELECT PetID, weight FROM Pets WHERE pet_age > 1;
SELECT PetID, weight FROM Pets WHERE pet_age > 1;
SELECT PetType, AVG(pet_age) AS avg_pet_age, MAX(pet_age) AS max_pet_age FROM Pets GROUP BY PetType;
SELECT PetType, AVG(pet_age) AS avg_pet_age, MAX(pet_age) AS max_pet_age FROM Pets GROUP BY PetType;
SELECT PetType, AVG(weight) AS AverageWeight FROM Pets GROUP BY PetType;
SELECT PetType, AVG(weight) AS AverageWeight FROM Pets GROUP BY PetType;
SELECT Student.Fname, Student.Age FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID;
SELECT Student.Fname, Student.Age FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID;
SELECT Pets.PetID FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Student.LName = 'Smith';
SELECT Has_Pet.PetID FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID WHERE Student.LName = 'Smith';
SELECT Has_Pet.StuID, COUNT(Has_Pet.PetID) AS NumberOfPets FROM Has_Pet INNER JOIN Student ON Has_Pet.StuID = Student.StuID GROUP BY Has_Pet.StuID HAVING COUNT(Has_Pet.PetID) > 0;
SELECT Has_Pet.StuID, COUNT(Has_Pet.PetID) AS NumberOfPets FROM Has_Pet GROUP BY Has_Pet.StuID;
SELECT Student.Fname, Student.Sex FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID GROUP BY Student.StuID HAVING COUNT(Has_Pet.PetID) > 1;
SELECT Student.Fname, Student.Sex FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID GROUP BY Student.StuID HAVING COUNT(Has_Pet.PetID) > 1;
SELECT Student.LName FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.pet_age = 3 AND Pets.PetType = 'cat';
SELECT Student.LName FROM Student JOIN Has_Pet ON Student.StuID = Has_Pet.StuID JOIN Pets ON Has_Pet.PetID = Pets.PetID WHERE Pets.pet_age = 3 AND Pets.PetType = 'cat';
SELECT AVG(Student.Age) AS Average_Age FROM Student WHERE Student.StuID NOT IN (SELECT StuID FROM Has_Pet);
SELECT AVG(Student.Age) AS Average_Age FROM Student WHERE Student.StuID NOT IN (SELECT StuID FROM Has_Pet);
SELECT COUNT(*) AS continent_count FROM continents;
SELECT COUNT(DISTINCT Continent) AS Number_of_Continents FROM continents;
SELECT continents.ContId, continents.Continent, COUNT(countries.CountryId) AS NumberOfCountries FROM continents JOIN countries ON continents.ContId = countries.Continent GROUP BY continents.ContId;
SELECT continents.ContId, continents.Continent, COUNT(countries.CountryId) AS CountryCount FROM continents LEFT JOIN countries ON continents.ContId = countries.Continent GROUP BY continents.ContId, continents.Continent;
SELECT COUNT(DISTINCT CountryId) AS country_count FROM countries;
SELECT COUNT(*) AS country_count FROM countries;
SELECT car_makers.Id, car_makers.FullName, COUNT(model_list.ModelId) AS NumberOfModels FROM car_makers JOIN model_list ON car_makers.Id = model_list.Maker GROUP BY car_makers.Id;
SELECT cm.Id, cm.FullName, COUNT(ml.ModelId) AS ModelCount FROM car_makers AS cm JOIN model_list AS ml ON cm.Id = ml.Maker GROUP BY cm.Id;
SELECT ml.Model FROM model_list AS ml JOIN car_names AS cn ON ml.Model = cn.Model JOIN cars_data AS cd ON cn.MakeId = cd.Id ORDER BY cd.Horsepower ASC LIMIT 1;
SELECT ml.Model FROM model_list AS ml JOIN cars_data AS cd ON ml.Maker = cd.Id ORDER BY cd.Horsepower LIMIT 1;
SELECT DISTINCT cn.Model FROM car_names AS cn JOIN cars_data AS cd ON cn.MakeId = cd.Id WHERE cd.Weight < (SELECT AVG(Weight) FROM cars_data);
SELECT ml.Model FROM model_list AS ml JOIN car_names AS cn ON ml.Model = cn.Model JOIN cars_data AS cd ON cn.MakeId = cd.Id WHERE cd.Weight < (SELECT AVG(cd2.Weight) FROM cars_data AS cd2);
SELECT DISTINCT cm.Maker FROM car_makers AS cm JOIN model_list AS ml ON cm.Id = ml.Maker JOIN car_names AS cn ON ml.Model = cn.Model JOIN cars_data AS cd ON cn.MakeId = cd.Id WHERE cd.Year = 1970;
SELECT DISTINCT cm.Maker FROM car_makers AS cm JOIN model_list AS ml ON cm.Id = ml.Maker JOIN car_names AS cn ON ml.Model = cn.Model JOIN cars_data AS cd ON cn.MakeId = cd.Id WHERE cd.Year = 1970;
SELECT cn.Make, cd.Year FROM car_names AS cn JOIN cars_data AS cd ON cn.MakeId = cd.Id WHERE cd.Year = (SELECT MIN(Year) FROM cars_data);
SELECT cm.Maker, cd.Year FROM car_makers AS cm JOIN model_list AS ml ON cm.Id = ml.Maker JOIN car_names AS cn ON ml.Model = cn.Model JOIN cars_data AS cd ON cn.MakeId = cd.Id WHERE cd.Year = (SELECT MIN(Year) FROM cars_data);
SELECT DISTINCT cn.Model FROM car_names AS cn JOIN cars_data AS cd ON cn.MakeId = cd.Id WHERE cd.Year > 1980;
SELECT DISTINCT T3.Model FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId JOIN model_list AS T3 ON T2.Model = T3.Model WHERE T1.Year > 1980;
SELECT c.Continent, COUNT(cm.Id) AS MakerCount FROM car_makers cm JOIN countries co ON cm.Country = co.CountryId JOIN continents c ON co.Continent = c.ContId GROUP BY c.Continent;
SELECT c.Continent, COUNT(cm.Id) AS NumberOfCarMakers FROM continents c JOIN countries co ON c.ContId = co.Continent JOIN car_makers cm ON co.CountryId = cm.Country GROUP BY c.Continent;
SELECT c.CountryName FROM car_makers cm JOIN countries c ON cm.Country = c.CountryId GROUP BY c.CountryName ORDER BY COUNT(cm.Id) DESC LIMIT 1;
SELECT c.CountryName FROM countries AS c JOIN car_makers AS cm ON c.CountryId = cm.Country GROUP BY c.CountryName ORDER BY COUNT(cm.Id) DESC LIMIT 1;
SELECT cm.FullName, COUNT(ml.ModelId) AS ModelCount FROM car_makers AS cm JOIN model_list AS ml ON cm.Id = ml.Maker GROUP BY cm.FullName;
SELECT cm.Id, cm.FullName, COUNT(ml.Model) AS ModelCount FROM car_makers AS cm JOIN model_list AS ml ON cm.Id = ml.Maker GROUP BY cm.Id;
SELECT cd.Accelerate FROM cars_data AS cd JOIN car_names AS cn ON cd.Id = cn.MakeId WHERE cn.Make = 'amc' AND cn.Model = 'hornet sportabout (sw)';
SELECT cd.Accelerate FROM cars_data AS cd JOIN car_names AS cn ON cd.Id = cn.MakeId WHERE cn.Model = 'amc hornet sportabout (sw)';
SELECT COUNT(*) AS car_maker_count FROM car_makers WHERE Country = (SELECT CountryId FROM countries WHERE CountryName = 'france');
SELECT COUNT(*) AS maker_count FROM car_makers WHERE Country IN (SELECT CountryId FROM countries WHERE Continent IN (SELECT ContId FROM continents WHERE Continent = 'Europe') AND CountryName = 'France');
SELECT COUNT(DISTINCT ml.Model) AS CarModelCount FROM model_list AS ml JOIN car_makers AS cm ON ml.Maker = cm.Id JOIN countries AS c ON cm.Country = c.CountryId WHERE c.CountryName = 'usa';
SELECT COUNT(DISTINCT T3.Model) AS count FROM countries AS T1 JOIN car_makers AS T2 ON T1.CountryId = T2.Country JOIN model_list AS T3 ON T2.Id = T3.Maker WHERE T1.CountryName = 'usa';
SELECT AVG(MPG) AS average_mpg FROM cars_data WHERE Cylinders = '4';
SELECT AVG(MPG) AS average_mpg FROM cars_data WHERE Cylinders = 4;
SELECT MIN(Weight) AS smallest_weight FROM cars_data WHERE Cylinders = 8 AND Year = 1974;
SELECT MIN(Weight) AS min_weight FROM cars_data WHERE Cylinders = 8 AND Year = 1974;
SELECT Maker, Model FROM model_list;
SELECT T1.Maker, T2.Model FROM car_makers AS T1 JOIN model_list AS T2 ON T1.Id = T2.Maker;
SELECT countries.CountryName, countries.CountryId FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.CountryId;
SELECT countries.CountryName, countries.CountryId FROM countries JOIN car_makers ON countries.CountryId = car_makers.Country GROUP BY countries.CountryId;
SELECT COUNT(*) AS car_count FROM cars_data WHERE Horsepower > '150';
SELECT COUNT(*) AS car_count FROM cars_data WHERE Horsepower > '150';
SELECT Year, AVG(Weight) AS AverageWeight FROM cars_data GROUP BY Year;
SELECT Year, AVG(Weight) AS Average_Weight FROM cars_data GROUP BY Year;
SELECT c.CountryName FROM countries AS c JOIN car_makers AS cm ON c.CountryId = cm.Country WHERE c.Continent = (SELECT ContId FROM continents WHERE Continent = 'europe') GROUP BY c.CountryName HAVING COUNT(cm.Maker) >= 3;
SELECT c.CountryName FROM countries AS c JOIN continents AS cont ON c.Continent = cont.ContId JOIN car_makers AS cm ON c.CountryId = cm.Country WHERE cont.Continent = 'Europe' GROUP BY c.CountryName HAVING COUNT(cm.Id) >= 3;
SELECT T1.Model, MAX(T2.Horsepower) AS MaxHorsepower FROM cars_data AS T2 JOIN car_names AS T1 ON T2.Id = T1.MakeId WHERE T2.Cylinders = 3 GROUP BY T1.Model;
SELECT car_names.Make, MAX(cars_data.Horsepower) AS MaxHorsepower FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE cars_data.Cylinders = 3;
SELECT ml.Model FROM model_list AS ml JOIN cars_data AS cd ON cd.Id = (SELECT MakeId FROM car_names WHERE Model = ml.Model) ORDER BY cd.MPG DESC LIMIT 1;
SELECT T2.Model FROM cars_data AS T1 JOIN car_names AS T3 ON T1.Id = T3.MakeId JOIN model_list AS T2 ON T3.Model = T2.Model GROUP BY T2.Model ORDER BY MAX(T1.MPG) DESC LIMIT 1;
SELECT AVG(Horsepower) AS Average_Horsepower FROM cars_data WHERE Year < 1980;
SELECT AVG(Horsepower) AS Average_Horsepower FROM cars_data WHERE Year < 1980;
SELECT AVG(cars_data.Edispl) AS average_edispl FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model WHERE model_list.Model = 'volvo';
SELECT AVG(cars_data.Edispl) AS average_edispl FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId JOIN model_list ON car_names.Model = model_list.Model JOIN car_makers ON model_list.Maker = car_makers.Id WHERE car_makers.Maker = 'volvo';
SELECT Cylinders, MAX(Accelerate) AS Max_Accelerate FROM cars_data GROUP BY Cylinders;
SELECT Cylinders, MAX(Accelerate) AS Max_Accelerate FROM cars_data GROUP BY Cylinders;
SELECT cm.Maker FROM car_makers AS cm JOIN model_list AS ml ON cm.Id = ml.Maker GROUP BY cm.Maker ORDER BY COUNT(ml.Model) DESC LIMIT 1;
SELECT Maker, COUNT(DISTINCT Model) AS distinct_models FROM model_list GROUP BY Maker ORDER BY distinct_models DESC LIMIT 1;
SELECT COUNT(*) AS car_count FROM cars_data WHERE Cylinders > 4;
SELECT COUNT(*) AS car_count FROM cars_data WHERE Cylinders > 4;
SELECT COUNT(*) AS car_count FROM cars_data WHERE Year = 1980;
SELECT COUNT(*) AS car_count FROM cars_data WHERE Year = 1980;
SELECT COUNT(T1.Model) AS ModelCount FROM model_list AS T1 JOIN car_makers AS T2 ON T1.Maker = T2.Id WHERE T2.FullName = 'American Motor Company';
SELECT COUNT(DISTINCT Model) AS NumberOfModels FROM model_list WHERE Maker = (SELECT Id FROM car_makers WHERE Maker = 'American Motor Company');
SELECT cm.Id, cm.FullName FROM car_makers AS cm JOIN model_list AS ml ON cm.Id = ml.Maker GROUP BY cm.Id HAVING COUNT(ml.Model) > 3;
SELECT cm.Id, cm.Maker FROM car_makers AS cm JOIN model_list AS ml ON cm.Id = ml.Maker GROUP BY cm.Id HAVING COUNT(ml.Model) > 3;
SELECT DISTINCT ml.Model FROM model_list AS ml JOIN car_makers AS cm ON ml.Maker = cm.Id JOIN cars_data AS cd ON cd.Id IN (SELECT MakeId FROM car_names WHERE Model = ml.Model) WHERE cm.FullName = 'General Motors' OR cd.Weight > 3500;
SELECT DISTINCT ml.Model FROM model_list AS ml JOIN car_makers AS cm ON ml.Maker = cm.Id JOIN cars_data AS cd ON ml.ModelId = cd.Id WHERE cm.Maker = 'General Motors' OR cd.Weight > 3500;
SELECT DISTINCT Year FROM cars_data WHERE Weight >= 3000 AND Weight <= 4000;
SELECT DISTINCT Year FROM cars_data WHERE Weight < 4000 INTERSECT SELECT DISTINCT Year FROM cars_data WHERE Weight > 3000;
SELECT Horsepower FROM cars_data WHERE Accelerate = (SELECT MAX(Accelerate) FROM cars_data);
SELECT Horsepower FROM cars_data WHERE Accelerate = (SELECT MAX(Accelerate) FROM cars_data);
SELECT cd.Cylinders FROM cars_data AS cd JOIN car_names AS cn ON cd.Id = cn.MakeId WHERE cn.Model = 'volvo' ORDER BY cd.Accelerate LIMIT 1;
SELECT cd.Cylinders FROM cars_data AS cd JOIN car_names AS cn ON cd.Id = cn.MakeId JOIN model_list AS ml ON cn.Model = ml.Model JOIN car_makers AS cm ON ml.Maker = cm.Id WHERE cm.Maker = 'volvo' ORDER BY cd.Accelerate LIMIT 1;
SELECT COUNT(*) FROM cars_data WHERE Accelerate > (SELECT MAX(Horsepower) FROM cars_data);
SELECT COUNT(*) AS car_count FROM cars_data WHERE Accelerate > (SELECT MAX(Horsepower) FROM cars_data);
SELECT COUNT(DISTINCT Country) AS country_count FROM car_makers GROUP BY Country HAVING COUNT(Maker) > 2;
SELECT COUNT(DISTINCT Country) AS country_count FROM car_makers GROUP BY Country HAVING COUNT(Maker) > 2;
SELECT COUNT(*) AS car_count FROM cars_data WHERE Cylinders > 6;
SELECT COUNT(*) AS car_count FROM cars_data WHERE Cylinders > 6;
SELECT ml.Model FROM model_list AS ml JOIN cars_data AS cd ON ml.ModelId = cd.Id WHERE cd.Cylinders = 4 GROUP BY cd.Horsepower ORDER BY cd.Horsepower DESC LIMIT 1;
SELECT T3.Model FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id = T2.MakeId JOIN model_list AS T3 ON T2.Model = T3.Model WHERE T1.Cylinders = 4 ORDER BY T1.Horsepower DESC LIMIT 1;
SELECT car_names.MakeId, car_names.Make FROM cars_data JOIN car_names ON cars_data.Id = car_names.MakeId WHERE cars_data.Horsepower > (SELECT MIN(Horsepower) FROM cars_data) AND cars_data.Cylinders <= 3;
SELECT cn.MakeId, cn.Make FROM car_names AS cn JOIN cars_data AS cd ON cn.MakeId = cd.Id WHERE cd.Horsepower < (SELECT MIN(Horsepower) FROM cars_data) AND cd.Cylinders < 4;
SELECT MAX(MPG) AS max_mpg FROM cars_data WHERE Cylinders = 8 OR Year < 1980;
SELECT MAX(MPG) AS max_mpg FROM cars_data WHERE Cylinders = 8 OR Year < 1980;
SELECT DISTINCT ml.Model FROM model_list AS ml JOIN car_makers AS cm ON ml.Maker = cm.Id JOIN cars_data AS cd ON ml.ModelId = cd.Id WHERE cd.Weight < 3500 AND cm.FullName != 'Ford Motor Company';
SELECT DISTINCT ml.Model FROM model_list AS ml JOIN cars_data AS cd ON ml.ModelId = cd.Id JOIN car_names AS cn ON cd.Id = cn.MakeId JOIN car_makers AS cm ON ml.Maker = cm.Id WHERE cd.Weight < 3500 AND cm.Maker != 'Ford';
SELECT CountryName FROM countries WHERE CountryId NOT IN (SELECT Country FROM car_makers);
SELECT CountryName FROM countries WHERE CountryId NOT IN (SELECT Country FROM car_makers);
WITH maker_model_count AS ( SELECT Maker, COUNT(DISTINCT Model) AS model_count FROM model_list GROUP BY Maker ), top_makers AS ( SELECT Maker FROM maker_model_count WHERE model_count >= 2 ORDER BY model_count DESC LIMIT 3 ) SELECT cm.Id, cm.Maker FROM car_makers cm JOIN top_makers tm ON cm.Id = tm.Maker;
SELECT cm.Id, cm.Maker FROM car_makers AS cm JOIN model_list AS ml ON cm.Id = ml.Maker JOIN car_names AS cn ON cm.Id = cn.Model GROUP BY cm.Id, cm.Maker HAVING COUNT(DISTINCT ml.Model) >= 2 AND COUNT(cn.MakeId) > 3;
SELECT c.CountryId, c.CountryName FROM countries AS c JOIN car_makers AS cm ON c.CountryId = cm.Country JOIN model_list AS ml ON cm.Id = ml.Maker JOIN car_names AS cn ON ml.ModelId = cn.MakeId WHERE ml.Model = 'fiat' GROUP BY c.CountryId, c.CountryName HAVING COUNT(cm.Id) > 3 OR ml.Model = 'fiat';
SELECT c.CountryId, c.CountryName FROM countries AS c JOIN car_makers AS cm ON c.CountryId = cm.Country WHERE (SELECT COUNT(*) FROM car_makers WHERE Country = c.CountryId) > 3 OR EXISTS (SELECT Model FROM model_list WHERE Maker IN (SELECT Id FROM car_makers WHERE Country = c.CountryId) AND Model = 'fiat');
SELECT Country FROM airlines WHERE Airline = 'JetBlue Airways';
SELECT Country FROM airlines WHERE Airline = 'JetBlue Airways';
SELECT Abbreviation FROM airlines WHERE Airline = 'JetBlue Airways';
SELECT Abbreviation FROM airlines WHERE Airline = 'JetBlue Airways';
SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA';
SELECT Airline, Abbreviation FROM airlines WHERE Country = 'USA';
SELECT AirportCode, AirportName FROM airports WHERE City = 'Anthony';
SELECT AirportCode, AirportName FROM airports WHERE City = 'Anthony';
SELECT COUNT(*) AS airline_count FROM airlines;
SELECT COUNT(*) AS total_airlines FROM airlines;
SELECT COUNT(*) AS airport_count FROM airports;
SELECT COUNT(*) AS AirportCount FROM airports;
SELECT COUNT(*) AS total_flights FROM flights;
SELECT COUNT(*) AS total_flights FROM flights;
SELECT Airline FROM airlines WHERE Abbreviation = 'UAL';
SELECT Airline FROM airlines WHERE Abbreviation = 'UAL';
SELECT COUNT(*) FROM airlines WHERE Country = 'USA';
SELECT COUNT(*) FROM airlines WHERE Country = 'USA';
SELECT City, Country FROM airports WHERE AirportCode = 'ALN';
SELECT City, Country FROM airports WHERE AirportName = 'Alton';
SELECT AirportName FROM airports WHERE AirportCode = 'AKO';
SELECT AirportName FROM airports WHERE AirportCode = 'AKO';
SELECT AirportName FROM airports WHERE City = 'Aberdeen';
SELECT AirportName FROM airports WHERE City = 'Aberdeen';
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG';
SELECT COUNT(*) FROM flights WHERE SourceAirport = 'APG';
SELECT COUNT(*) FROM flights WHERE DestAirport = 'ATO';
SELECT COUNT(*) AS flight_count FROM flights WHERE DestAirport = 'ATO';
SELECT COUNT(*) AS flight_count FROM flights WHERE SourceAirport IN (SELECT AirportCode FROM airports WHERE City = 'Aberdeen');
SELECT COUNT(*) AS NumberOfFlights FROM flights WHERE SourceAirport = 'ABR';
SELECT COUNT(*) AS flight_count FROM flights INNER JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';
SELECT COUNT(*) AS NumberOfFlights FROM flights WHERE DestAirport = 'ABR';
SELECT COUNT(*) AS flight_count FROM flights WHERE SourceAirport = 'Aberdeen' AND DestAirport = 'Ashley';
SELECT COUNT(*) AS flight_count FROM flights WHERE SourceAirport = (SELECT AirportCode FROM airports WHERE City = 'Aberdeen') AND DestAirport = (SELECT AirportCode FROM airports WHERE City = 'Ashley');
SELECT COUNT(*) FROM flights WHERE Airline = (SELECT uid FROM airlines WHERE Airline = 'JetBlue Airways');
SELECT COUNT(*) FROM flights AS f JOIN airlines AS a ON f.Airline = a.uid WHERE a.Airline = 'JetBlue Airways';
SELECT COUNT(*) AS flight_count FROM flights WHERE Airline = (SELECT uid FROM airlines WHERE Airline = 'United Airlines') AND DestAirport = 'ASY';
SELECT COUNT(*) AS flight_count FROM flights WHERE Airline = (SELECT uid FROM airlines WHERE Airline = 'United Airlines') AND DestAirport = 'ASY';
SELECT COUNT(flights.Airline) FROM flights JOIN airlines ON flights.Airline = airlines.uid WHERE airlines.Airline = 'United Airlines' AND flights.SourceAirport = 'AHD';
SELECT COUNT(f.FlightNo) AS FlightCount FROM flights f JOIN airlines a ON f.Airline = a.uid WHERE a.Airline = 'United Airlines' AND f.SourceAirport = 'AHD';
SELECT COUNT(f.FlightNo) AS FlightCount FROM flights f JOIN airlines a ON f.Airline = a.uid WHERE a.Airline = 'United Airlines' AND f.DestAirport IN (SELECT AirportCode FROM airports WHERE City = 'Aberdeen');
SELECT COUNT(*) AS NumberOfFlights FROM flights JOIN airlines ON flights.Airline = airlines.uid WHERE airlines.Airline = 'United Airlines' AND flights.DestAirport IN (SELECT AirportCode FROM airports WHERE City = 'Aberdeen');
SELECT a.City FROM airports AS a JOIN flights AS f ON a.AirportCode = f.DestAirport GROUP BY a.City ORDER BY COUNT(f.DestAirport) DESC LIMIT 1;
SELECT a.City FROM airports a JOIN flights f ON a.AirportCode = f.DestAirport GROUP BY a.City ORDER BY COUNT(f.DestAirport) DESC LIMIT 1;
SELECT a.City FROM airports AS a JOIN flights AS f ON a.AirportCode = f.SourceAirport GROUP BY a.City ORDER BY COUNT(f.SourceAirport) DESC LIMIT 1;
SELECT a.City FROM airports AS a JOIN flights AS f ON a.AirportCode = f.SourceAirport GROUP BY a.City ORDER BY COUNT(f.SourceAirport) DESC LIMIT 1;
SELECT AirportCode FROM airports WHERE AirportCode IN (SELECT SourceAirport AS AirportCode FROM flights UNION SELECT DestAirport AS AirportCode FROM flights) GROUP BY AirportCode ORDER BY COUNT(*) DESC LIMIT 1;
SELECT AirportCode FROM airports WHERE AirportCode IN (SELECT SourceAirport FROM flights GROUP BY SourceAirport ORDER BY COUNT(*) DESC LIMIT 1) UNION SELECT AirportCode FROM airports WHERE AirportCode IN (SELECT DestAirport FROM flights GROUP BY DestAirport ORDER BY COUNT(*) DESC LIMIT 1);
SELECT SourceAirport AS AirportCode FROM flights GROUP BY SourceAirport ORDER BY COUNT(SourceAirport) ASC LIMIT 1;
SELECT AirportCode FROM airports WHERE AirportCode IN (SELECT SourceAirport FROM flights UNION SELECT DestAirport FROM flights) GROUP BY AirportCode ORDER BY COUNT(AirportCode) ASC LIMIT 1;
SELECT a.Airline, COUNT(f.FlightNo) AS FlightCount FROM airlines a JOIN flights f ON a.uid = f.Airline GROUP BY a.Airline ORDER BY FlightCount DESC LIMIT 1;
SELECT a.Airline, COUNT(f.FlightNo) AS FlightCount FROM flights f JOIN airlines a ON f.Airline = a.uid GROUP BY a.Airline ORDER BY FlightCount DESC LIMIT 1;
SELECT a.Abbreviation, a.Country FROM airlines AS a JOIN flights AS f ON a.uid = f.Airline GROUP BY a.Abbreviation, a.Country ORDER BY COUNT(f.Airline) ASC LIMIT 1;
SELECT a.Abbreviation, a.Country FROM airlines AS a JOIN flights AS f ON a.uid = f.Airline GROUP BY a.Abbreviation, a.Country ORDER BY COUNT(f.Airline) ASC LIMIT 1;
SELECT DISTINCT a.Airline FROM airlines AS a JOIN flights AS f ON a.uid = f.Airline WHERE f.SourceAirport = 'AHD';
SELECT DISTINCT a.Airline FROM airlines AS a JOIN flights AS f ON a.uid = f.Airline WHERE f.SourceAirport = 'AHD';
SELECT DISTINCT a.Airline FROM airlines AS a JOIN flights AS f ON a.uid = f.Airline WHERE f.DestAirport = 'AHD';
SELECT DISTINCT a.Airline FROM airlines AS a JOIN flights AS f ON a.uid = f.Airline WHERE f.DestAirport = 'AHD';
SELECT DISTINCT a.Airline FROM airlines AS a JOIN flights AS f1 ON a.uid = f1.Airline JOIN flights AS f2 ON a.uid = f2.Airline WHERE (f1.SourceAirport = 'APG' AND f1.DestAirport = 'CVO') OR (f2.SourceAirport = 'CVO' AND f2.DestAirport = 'APG');
SELECT DISTINCT a.Airline FROM airlines AS a JOIN flights AS f ON a.uid = f.Airline WHERE f.SourceAirport IN ('APG', 'CVO') GROUP BY a.Airline HAVING COUNT(DISTINCT f.SourceAirport) > 1;
SELECT DISTINCT a.Airline FROM airlines AS a JOIN flights AS f ON a.Airline = f.Airline WHERE f.SourceAirport = 'CVO' AND 'APG' NOT IN (SELECT SourceAirport FROM flights WHERE Airline = a.Airline);
SELECT DISTINCT a.Airline FROM airlines AS a JOIN flights AS f ON a.uid = f.Airline WHERE f.SourceAirport = 'CVO' AND a.Airline NOT IN (SELECT a2.Airline FROM airlines AS a2 JOIN flights AS f2 ON a2.uid = f2.Airline WHERE f2.SourceAirport = 'APG');
SELECT a.Airline FROM airlines AS a JOIN flights AS f ON a.uid = f.Airline GROUP BY a.Airline HAVING COUNT(f.Airline) >= 10;
SELECT a.Airline, a.Abbreviation FROM airlines AS a JOIN flights AS f ON a.Airline = f.Airline GROUP BY a.Airline HAVING COUNT(f.FlightNo) >= 10;
SELECT a.Airline FROM airlines AS a JOIN flights AS f ON a.uid = f.Airline GROUP BY a.Airline HAVING COUNT(f.Airline) < 200;
SELECT a.Airline, COUNT(f.FlightNo) AS FlightCount FROM airlines a JOIN flights f ON a.Airline = f.Airline GROUP BY a.Airline HAVING FlightCount < 200;
SELECT FlightNo FROM flights WHERE Airline IN (SELECT uid FROM airlines WHERE Airline = 'United Airlines');
SELECT flights.FlightNo FROM flights JOIN airlines ON flights.Airline = airlines.uid WHERE airlines.Airline = 'United Airlines';
SELECT FlightNo FROM flights WHERE SourceAirport = 'APG';
SELECT FlightNo FROM flights WHERE SourceAirport = 'APG';
SELECT FlightNo FROM flights WHERE DestAirport = 'APG';
SELECT FlightNo FROM flights WHERE DestAirport = 'APG';
SELECT flights.FlightNo FROM flights JOIN airports ON flights.SourceAirport = airports.AirportCode WHERE airports.City = 'Aberdeen';
SELECT FlightNo FROM flights WHERE SourceAirport = 'ABR';
SELECT FlightNo FROM flights WHERE DestAirport = 'Aberdeen';
SELECT FlightNo FROM flights WHERE DestAirport = 'ABR';
SELECT COUNT(*) AS NumberOfFlights FROM flights WHERE DestAirport IN ('Aberdeen', 'Abilene');
SELECT COUNT(*) FROM flights WHERE DestAirport IN (SELECT AirportCode FROM airports WHERE City IN ('Aberdeen', 'Abilene'));
SELECT AirportName FROM airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM flights) AND AirportCode NOT IN (SELECT DestAirport FROM flights);
SELECT AirportCode, City, AirportName, Country, CountryAbbrev FROM airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM flights UNION SELECT DestAirport FROM flights);
SELECT COUNT(*) AS employee_count FROM employee;
SELECT COUNT(*) AS employee_count FROM employee;
SELECT Name FROM employee ORDER BY Age ASC;
SELECT Name FROM employee ORDER BY Age ASC;
SELECT City, COUNT(Employee_ID) AS Number_of_Employees FROM employee GROUP BY City;
SELECT City, COUNT(Employee_ID) AS Number_of_Employees FROM employee GROUP BY City;
SELECT City FROM employee WHERE Age < 30 GROUP BY City HAVING COUNT(Employee_ID) > 1;
SELECT City FROM employee WHERE Age < 30 GROUP BY City HAVING COUNT(Employee_ID) > 1;
SELECT Location, COUNT(Shop_ID) AS Number_of_Shops FROM shop GROUP BY Location;
SELECT Location, COUNT(Shop_ID) AS Number_of_Shops FROM shop GROUP BY Location;
SELECT Manager_name, District FROM shop WHERE Number_products = (SELECT MAX(Number_products) FROM shop);
SELECT Manager_name, District FROM shop WHERE Number_products = (SELECT MAX(Number_products) FROM shop);
SELECT min(Number_products) AS Minimum_Number_of_Products, max(Number_products) AS Maximum_Number_of_Products FROM shop;
SELECT min(Number_products) AS Minimum_Number_Products, max(Number_products) AS Maximum_Number_Products FROM shop;
SELECT Name, Location, District FROM shop ORDER BY Number_products DESC;
SELECT Name, Location, District FROM shop ORDER BY Number_products DESC;
SELECT Name FROM shop WHERE Number_products > (SELECT AVG(Number_products) FROM shop);
SELECT Name FROM shop WHERE Number_products > (SELECT AVG(Number_products) FROM shop);
SELECT e.Name FROM employee AS e JOIN evaluation AS ev ON e.Employee_ID = ev.Employee_ID GROUP BY e.Employee_ID ORDER BY COUNT(ev.Employee_ID) DESC LIMIT 1;
SELECT e.Name FROM employee AS e JOIN evaluation AS ev ON e.Employee_ID = ev.Employee_ID GROUP BY e.Name ORDER BY COUNT(ev.Employee_ID) DESC LIMIT 1;
SELECT e.Name FROM employee AS e JOIN evaluation AS ev ON e.Employee_ID = ev.Employee_ID WHERE ev.Bonus = (SELECT MAX(Bonus) FROM evaluation);
SELECT e.Name FROM employee AS e JOIN evaluation AS ev ON e.Employee_ID = ev.Employee_ID WHERE ev.Bonus = (SELECT MAX(Bonus) FROM evaluation);
SELECT Name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation);
SELECT Name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation);
SELECT shop.Name FROM shop JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY shop.Shop_ID ORDER BY COUNT(hiring.Employee_ID) DESC LIMIT 1;
SELECT shop.Name FROM shop JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY shop.Name ORDER BY COUNT(hiring.Employee_ID) DESC LIMIT 1;
SELECT Name FROM shop WHERE Shop_ID NOT IN (SELECT Shop_ID FROM hiring);
SELECT shop.Name FROM shop WHERE shop.Shop_ID NOT IN (SELECT Shop_ID FROM hiring);
SELECT shop.Name, COUNT(hiring.Employee_ID) AS Number_of_Employees FROM hiring JOIN shop ON hiring.Shop_ID = shop.Shop_ID GROUP BY shop.Name;
SELECT shop.Name, COUNT(hiring.Employee_ID) AS Number_of_Employees FROM shop JOIN hiring ON shop.Shop_ID = hiring.Shop_ID GROUP BY shop.Name;
SELECT SUM(Bonus) AS total_bonus FROM evaluation;
SELECT SUM(Bonus) AS Total_Bonus FROM evaluation;
SELECT * FROM hiring;
SELECT * FROM hiring;
SELECT District FROM shop WHERE Number_products < 3000 INTERSECT SELECT District FROM shop WHERE Number_products > 10000;
SELECT DISTINCT s1.District FROM shop AS s1 JOIN shop AS s2 ON s1.District = s2.District WHERE s1.Number_products < 3000 AND s2.Number_products > 10000;
SELECT COUNT(DISTINCT Location) AS distinct_store_locations FROM shop;
SELECT COUNT(DISTINCT Location) FROM shop;
SELECT COUNT(*) AS document_count FROM Documents;
SELECT COUNT(*) AS document_count FROM Documents;
SELECT Document_ID, Document_Name, Document_Description FROM Documents;
SELECT Document_ID, Document_Name, Document_Description FROM Documents;
SELECT Document_Name, Template_ID FROM Documents WHERE Document_Description LIKE '%w%';
SELECT Document_Name, Template_ID FROM Documents WHERE Document_Description LIKE '%w%';
SELECT Document_ID, Template_ID, Document_Description FROM Documents WHERE Document_Name = 'Robbin CV';
SELECT Document_ID, Template_ID, Document_Description FROM Documents WHERE Document_Name = 'Robbin CV';
SELECT COUNT(DISTINCT T.Template_Type_Code) AS Distinct_Template_Types FROM Documents D JOIN Templates T ON D.Template_ID = T.Template_ID;
SELECT COUNT(DISTINCT Template_Type_Code) AS distinct_template_types_count FROM Templates;
SELECT COUNT(Documents.Document_ID) AS Document_Count FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Code = 'PPT';
SELECT COUNT(D.DOCUMENT_ID) AS ppt_document_count FROM Documents D JOIN Templates T ON D.Template_ID = T.Template_ID JOIN Ref_Template_Types RTT ON T.Template_Type_Code = RTT.Template_Type_Code WHERE RTT.Template_Type_Code = 'PPT';
SELECT Templates.Template_ID, COUNT(Documents.Document_ID) AS Document_Count FROM Templates JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Templates.Template_ID;
SELECT Template_Type_Code, COUNT(Template_ID) AS Usage_Count FROM Templates GROUP BY Template_Type_Code;
SELECT T1.Template_ID, T1.Template_Type_Code FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY T1.Template_ID, T1.Template_Type_Code ORDER BY COUNT(T2.Document_ID) DESC LIMIT 1;
SELECT Templates.Template_Type_Code, Templates.Template_ID FROM Documents JOIN Templates ON Documents.Template_ID = Templates.Template_ID GROUP BY Templates.Template_Type_Code, Templates.Template_ID ORDER BY COUNT(Documents.Document_ID) DESC LIMIT 1;
SELECT Template_ID FROM Documents GROUP BY Template_ID HAVING COUNT(Document_ID) > 1;
SELECT Template_ID FROM Documents GROUP BY Template_ID HAVING COUNT(Document_ID) > 1;
SELECT Template_ID FROM Templates WHERE Template_ID NOT IN (SELECT Template_ID FROM Documents);
SELECT Template_ID FROM Templates WHERE Template_ID NOT IN (SELECT Template_ID FROM Documents);
SELECT COUNT(*) AS Template_Count FROM Templates;
SELECT COUNT(*) AS template_count FROM Templates;
SELECT Template_ID, Version_Number, Template_Type_Code FROM Templates;
SELECT Template_ID, Version_Number, Template_Type_Code FROM Templates;
SELECT DISTINCT Template_Type_Code FROM Templates;
SELECT DISTINCT Template_Type_Code FROM Ref_Template_Types;
SELECT Template_ID FROM Templates WHERE Template_Type_Code = 'PP' OR Template_Type_Code = 'PPT';
SELECT Template_ID FROM Templates WHERE Template_Type_Code = 'PP' OR Template_Type_Code = 'PPT';
SELECT COUNT(Template_ID) AS template_count FROM Templates WHERE Template_Type_Code = 'CV';
SELECT COUNT(Template_ID) AS CV_Template_Count FROM Templates WHERE Template_Type_Code = 'CV';
SELECT Version_Number, Template_Type_Code FROM Templates WHERE Version_Number > 5;
SELECT Version_Number, Template_Type_Code FROM Templates WHERE Version_Number > 5;
SELECT Ref_Template_Types.Template_Type_Code, COUNT(Templates.Template_ID) AS Template_Count FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code GROUP BY Ref_Template_Types.Template_Type_Code;
SELECT Ref_Template_Types.Template_Type_Code, COUNT(Templates.Template_ID) AS Template_Count FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code GROUP BY Ref_Template_Types.Template_Type_Code;
SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY COUNT(Template_Type_Code) DESC LIMIT 1;
SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY COUNT(Template_ID) DESC LIMIT 1;
SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code GROUP BY Ref_Template_Types.Template_Type_Code HAVING COUNT(Templates.Template_ID) < 3;
SELECT Ref_Template_Types.Template_Type_Code FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code GROUP BY Ref_Template_Types.Template_Type_Code HAVING COUNT(Templates.Template_ID) < 3;
SELECT Templates.Template_Type_Code, Templates.Version_Number FROM Templates WHERE Templates.Version_Number = (SELECT MIN(Version_Number) FROM Templates);
SELECT Template_Type_Code, MIN(Version_Number) AS Lowest_Version FROM Templates GROUP BY Template_Type_Code ORDER BY Lowest_Version LIMIT 1;
SELECT T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID WHERE T1.Document_Name = 'Data base';
SELECT t.Template_Type_Code FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID WHERE d.Document_Name = 'Data base';
SELECT d.Document_Name FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID JOIN Ref_Template_Types rtt ON t.Template_Type_Code = rtt.Template_Type_Code WHERE rtt.Template_Type_Code = 'BK';
SELECT DISTINCT d.Document_Name FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID JOIN Ref_Template_Types rtt ON t.Template_Type_Code = rtt.Template_Type_Code WHERE rtt.Template_Type_Code = 'BK';
SELECT Ref_Template_Types.Template_Type_Code, COUNT(Documents.Document_ID) AS Document_Count FROM Ref_Template_Types JOIN Templates ON Ref_Template_Types.Template_Type_Code = Templates.Template_Type_Code JOIN Documents ON Templates.Template_ID = Documents.Template_ID GROUP BY Ref_Template_Types.Template_Type_Code;
SELECT rtt.Template_Type_Code, COUNT(d.Document_ID) AS Document_Count FROM Ref_Template_Types rtt JOIN Templates t ON rtt.Template_Type_Code = t.Template_Type_Code LEFT JOIN Documents d ON t.Template_ID = d.Template_ID GROUP BY rtt.Template_Type_Code;
SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY COUNT(Template_ID) DESC LIMIT 1;
SELECT Template_Type_Code FROM Templates GROUP BY Template_Type_Code ORDER BY COUNT(Template_Type_Code) DESC LIMIT 1;
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code NOT IN (SELECT Template_Type_Code FROM Templates WHERE Template_ID IN (SELECT Template_ID FROM Documents));
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Code NOT IN (SELECT Template_Type_Code FROM Templates WHERE Template_ID IN (SELECT Template_ID FROM Documents));
SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types;
SELECT Template_Type_Code, Template_Type_Description FROM Ref_Template_Types;
SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = 'AD';
SELECT Template_Type_Description FROM Ref_Template_Types WHERE Template_Type_Code = 'AD';
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Book';
SELECT Template_Type_Code FROM Ref_Template_Types WHERE Template_Type_Description = 'Book';
SELECT DISTINCT rtt.Template_Type_Description FROM Ref_Template_Types rtt JOIN Templates t ON rtt.Template_Type_Code = t.Template_Type_Code JOIN Documents d ON t.Template_ID = d.Template_ID;
SELECT DISTINCT rtt.Template_Type_Description FROM Documents d JOIN Templates t ON d.Template_ID = t.Template_ID JOIN Ref_Template_Types rtt ON t.Template_Type_Code = rtt.Template_Type_Code;
SELECT Templates.Template_ID FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = 'Presentation';
SELECT Templates.Template_ID FROM Templates JOIN Ref_Template_Types ON Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code WHERE Ref_Template_Types.Template_Type_Description = 'Presentation';
SELECT COUNT(*) AS Total_Paragraphs FROM Paragraphs;
SELECT COUNT(*) AS paragraph_count FROM Paragraphs;
SELECT COUNT(p.Paragraph_ID) AS Paragraph_Count FROM Documents d JOIN Paragraphs p ON d.Document_ID = p.Document_ID WHERE d.Document_Name = 'Summer Show';
SELECT COUNT(p.Paragraph_ID) AS Paragraph_Count FROM Documents d JOIN Paragraphs p ON d.Document_ID = p.Document_ID WHERE d.Document_Name = 'Summer Show';
SELECT T2.Template_Details FROM Paragraphs AS T1 JOIN Documents AS T3 ON T1.Document_ID = T3.Document_ID JOIN Templates AS T2 ON T3.Template_ID = T2.Template_ID WHERE T1.Paragraph_Text = 'Korea ';
SELECT Templates.Template_Details FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID JOIN Templates ON Documents.Template_ID = Templates.Template_ID WHERE Paragraphs.Paragraph_Text LIKE '%Korea %';
SELECT Paragraphs.Paragraph_ID, Paragraphs.Paragraph_Text FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Documents.Document_Name = 'Welcome to NY';
SELECT P.Paragraph_ID, P.Paragraph_Text FROM Paragraphs AS P JOIN Documents AS D ON P.Document_ID = D.Document_ID WHERE D.Document_Name = 'Welcome to NY';
SELECT Paragraphs.Paragraph_Text FROM Documents JOIN Paragraphs ON Documents.Document_ID = Paragraphs.Document_ID WHERE Documents.Document_Name = 'Customer reviews';
SELECT Paragraphs.Paragraph_Text FROM Paragraphs JOIN Documents ON Paragraphs.Document_ID = Documents.Document_ID WHERE Documents.Document_Name = 'Customer reviews';
SELECT d.Document_ID, COUNT(p.Paragraph_ID) AS Paragraph_Count FROM Documents d JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID ORDER BY d.Document_ID;
SELECT d.Document_ID, COUNT(p.Paragraph_ID) AS Paragraph_Count FROM Documents d JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID ORDER BY d.Document_ID;
SELECT d.Document_ID, d.Document_Name, COUNT(p.Paragraph_ID) AS Number_of_Paragraphs FROM Documents d JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID, d.Document_Name;
SELECT d.Document_ID, d.Document_Name, COUNT(p.Paragraph_ID) AS Number_of_Paragraphs FROM Documents d JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID;
SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(Paragraph_ID) >= 2;
SELECT d.Document_ID FROM Documents d JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID HAVING COUNT(p.Paragraph_ID) >= 2;
SELECT d.Document_ID, d.Document_Name FROM Documents d JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID, d.Document_Name ORDER BY COUNT(p.Paragraph_ID) DESC LIMIT 1;
SELECT d.Document_ID, d.Document_Name FROM Documents d JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID ORDER BY COUNT(p.Paragraph_ID) DESC LIMIT 1;
SELECT Document_ID FROM Paragraphs GROUP BY Document_ID ORDER BY COUNT(Paragraph_ID) ASC LIMIT 1;
SELECT Document_ID FROM Paragraphs GROUP BY Document_ID ORDER BY COUNT(Paragraph_ID) ASC LIMIT 1;
SELECT d.Document_ID FROM Documents d JOIN Paragraphs p ON d.Document_ID = p.Document_ID GROUP BY d.Document_ID HAVING COUNT(p.Paragraph_ID) IN (1, 2);
SELECT Document_ID FROM Paragraphs GROUP BY Document_ID HAVING COUNT(Document_ID) BETWEEN 1 AND 2;
SELECT Document_ID FROM Paragraphs WHERE Paragraph_Text LIKE '%Brazil%' AND Paragraph_Text LIKE '%Ireland%';
SELECT DISTINCT d.Document_ID FROM Documents d JOIN Paragraphs p ON d.Document_ID = p.Document_ID WHERE p.Paragraph_Text LIKE '%Brazil%' AND p.Paragraph_Text LIKE '%Ireland%';
SELECT COUNT(Teacher_ID) AS Teacher_Count FROM teacher;
SELECT COUNT(*) AS total_teachers FROM teacher;
SELECT Name FROM teacher ORDER BY Age ASC;
SELECT Name FROM teacher ORDER BY Age ASC;
SELECT Age, Hometown FROM teacher;
SELECT Age, Hometown FROM teacher;
SELECT Name FROM teacher WHERE Hometown != 'Little Lever Urban District';
SELECT Name FROM teacher WHERE Hometown != 'Little Lever Urban District';
SELECT Name FROM teacher WHERE Age = '32' OR Age = '33';
SELECT Name FROM teacher WHERE Age = '32' OR Age = '33';
SELECT Hometown FROM teacher WHERE Age = (SELECT MIN(Age) FROM teacher);
SELECT Hometown FROM teacher WHERE Age = (SELECT MIN(Age) FROM teacher);
SELECT Hometown, COUNT(Teacher_ID) AS Teacher_Count FROM teacher GROUP BY Hometown;
SELECT Hometown, COUNT(Teacher_ID) AS Teacher_Count FROM teacher GROUP BY Hometown;
SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(Hometown) DESC LIMIT 1;
SELECT Hometown, COUNT(Teacher_ID) AS Teacher_Count FROM teacher GROUP BY Hometown ORDER BY Teacher_Count DESC;
SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(Teacher_ID) > 1;
SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(Teacher_ID) >= 2;
SELECT teacher.Name, course.Course FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID;
SELECT teacher.Name, course.Course FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID;
SELECT teacher.Name, course.Course FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID ORDER BY teacher.Name ASC;
SELECT teacher.Name, course.Course FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID ORDER BY teacher.Name ASC;
SELECT teacher.Name FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course.Course_ID = course_arrange.Course_ID WHERE course.Course = 'Math';
SELECT teacher.Name FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID JOIN course ON course_arrange.Course_ID = course.Course_ID WHERE course.Course = 'Math';
SELECT teacher.Name, COUNT(course_arrange.Course_ID) AS Number_of_Courses FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY teacher.Name;
SELECT teacher.Name, COUNT(course_arrange.Course_ID) AS Number_of_Courses FROM teacher JOIN course_arrange ON teacher.Teacher_ID = course_arrange.Teacher_ID GROUP BY teacher.Name;
SELECT t.Name FROM teacher AS t JOIN course_arrange AS ca ON t.Teacher_ID = ca.Teacher_ID GROUP BY t.Teacher_ID HAVING COUNT(ca.Course_ID) >= 2;
SELECT t.Name FROM teacher AS t JOIN course_arrange AS ca ON t.Teacher_ID = ca.Teacher_ID GROUP BY t.Name HAVING COUNT(DISTINCT ca.Course_ID) >= 2;
SELECT Name FROM teacher WHERE Teacher_ID NOT IN (SELECT Teacher_ID FROM course_arrange);
SELECT Name FROM teacher WHERE Teacher_ID NOT IN (SELECT DISTINCT Teacher_ID FROM course_arrange);
SELECT COUNT(*) AS visitor_count FROM visitor WHERE Age < 30;
SELECT Name FROM visitor WHERE Level_of_membership > 4 ORDER BY Level_of_membership DESC;
SELECT AVG(Age) AS average_age FROM visitor WHERE Level_of_membership <= 4;
SELECT Name, Level_of_membership FROM visitor WHERE Level_of_membership > 4 ORDER BY Age DESC;
SELECT Museum_ID, Name FROM museum ORDER BY Num_of_Staff DESC LIMIT 1;
SELECT AVG(Num_of_Staff) FROM museum WHERE Open_Year < '2009';
SELECT Open_Year, Num_of_Staff FROM museum WHERE Name = 'Plaza Museum';
SELECT Name FROM museum WHERE Num_of_Staff > (SELECT MIN(Num_of_Staff) FROM museum WHERE Open_Year > '2010');
SELECT v.ID, v.Name, v.Age FROM visitor AS v JOIN visit AS vi ON v.ID = vi.visitor_ID GROUP BY v.ID HAVING COUNT(vi.Museum_ID) > 1;
WITH TotalSpent AS ( SELECT visitor_ID, SUM(Total_spent) AS total_spent FROM visit GROUP BY visitor_ID ), MaxTotalSpent AS ( SELECT MAX(total_spent) AS max_total_spent FROM TotalSpent ) SELECT v.ID, v.Name, v.Level_of_membership FROM visitor v JOIN TotalSpent ts ON v.ID = ts.visitor_ID JOIN MaxTotalSpent mts ON ts.total_spent = mts.max_total_spent;
SELECT museum.Museum_ID, museum.Name FROM museum JOIN visit ON museum.Museum_ID = visit.Museum_ID GROUP BY museum.Museum_ID, museum.Name ORDER BY COUNT(visit.Museum_ID) DESC LIMIT 1;
SELECT Name FROM museum WHERE Museum_ID NOT IN (SELECT Museum_ID FROM visit);
SELECT v.Name, v.Age FROM visitor AS v JOIN visit AS vi ON v.ID = vi.visitor_ID WHERE vi.Num_of_Ticket = (SELECT MAX(Num_of_Ticket) FROM visit);
SELECT AVG(Num_of_Ticket) AS Average_Num_of_Ticket, MAX(Num_of_Ticket) AS Maximum_Num_of_Ticket FROM visit;
SELECT SUM(v.Total_spent) AS Total_ticket_expense FROM visit v JOIN visitor vi ON v.visitor_ID = vi.ID WHERE vi.Level_of_membership = 1;
SELECT v.Name FROM visitor v JOIN visit vi ON v.ID = vi.visitor_ID WHERE EXISTS (SELECT 1 FROM museum m WHERE m.Museum_ID = vi.Museum_ID AND m.Open_Year < '2009') AND EXISTS (SELECT 1 FROM museum m WHERE m.Museum_ID = vi.Museum_ID AND m.Open_Year > '2011');
SELECT COUNT(DISTINCT v.ID) AS Number_of_Visitors FROM visitor v LEFT JOIN visit vi ON v.ID = vi.visitor_ID LEFT JOIN museum m ON vi.Museum_ID = m.Museum_ID WHERE m.Open_Year <= '2010' OR vi.Museum_ID IS NULL;
SELECT COUNT(*) AS museum_count FROM museum WHERE Open_Year > '2013' OR Open_Year < '2008';
SELECT COUNT(*) AS total_players FROM players;
SELECT COUNT(*) AS player_count FROM players;
SELECT COUNT(*) AS total_matches FROM matches;
SELECT COUNT(*) AS match_count FROM matches;
SELECT first_name, birth_date FROM players WHERE country_code = 'USA';
SELECT first_name, birth_date FROM players WHERE country_code = 'USA';
SELECT AVG(loser_age) AS avg_loser_age, AVG(winner_age) AS avg_winner_age FROM matches;
SELECT AVG(loser_age) AS loser_age_avg, AVG(winner_age) AS winner_age_avg FROM matches;
SELECT AVG(winner_rank) AS average_winner_rank FROM matches;
SELECT AVG(winner_rank) AS average_winner_rank FROM matches;
SELECT MAX(loser_rank) AS max_loser_rank FROM matches;
SELECT MIN(loser_rank) AS best_loser_rank FROM matches;
SELECT COUNT(DISTINCT country_code) AS distinct_country_codes FROM players;
SELECT COUNT(DISTINCT country_code) AS distinct_countries FROM players;
SELECT COUNT(DISTINCT loser_name) AS distinct_loser_count FROM matches;
SELECT COUNT(DISTINCT loser_name) AS distinct_loser_names FROM matches;
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(match_num) > 10;
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10;
SELECT p.first_name, p.last_name FROM players p WHERE p.player_id IN (SELECT winner_id FROM matches WHERE year = 2013 AND winner_id IN (SELECT winner_id FROM matches WHERE year = 2016));
SELECT p.first_name, p.last_name FROM players AS p JOIN matches AS m ON p.player_id = m.winner_id WHERE m.year = 2013 OR m.year = 2016 GROUP BY p.player_id HAVING COUNT(DISTINCT m.year) = 2;
SELECT COUNT(*) AS match_count FROM matches WHERE year IN (2013, 2016);
SELECT COUNT(*) AS match_count FROM matches WHERE year IN (2013, 2016);
SELECT p.country_code, p.first_name FROM players p JOIN matches m ON p.player_id = m.winner_id WHERE m.tourney_name = 'WTA Championships' INTERSECT SELECT p.country_code, p.first_name FROM players p JOIN matches m ON p.player_id = m.winner_id WHERE m.tourney_name = 'Australian Open';
SELECT p.first_name, p.country_code FROM players AS p JOIN matches AS m ON p.player_id = m.winner_id WHERE m.tourney_name = 'WTA Championships' INTERSECT SELECT p.first_name, p.country_code FROM players AS p JOIN matches AS m ON p.player_id = m.winner_id WHERE m.tourney_name = 'Australian Open';
SELECT first_name, country_code FROM players WHERE birth_date = (SELECT MIN(birth_date) FROM players);
SELECT first_name, country_code FROM players ORDER BY birth_date ASC LIMIT 1;
SELECT first_name, last_name FROM players ORDER BY birth_date ASC;
SELECT first_name || ' ' || last_name AS full_name FROM players ORDER BY birth_date;
SELECT first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date ASC;
SELECT first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date;
SELECT p.first_name, p.country_code FROM players p JOIN rankings r ON p.player_id = r.player_id WHERE r.tours = (SELECT MAX(tours) FROM rankings);
SELECT p.first_name, p.country_code FROM players p JOIN rankings r ON p.player_id = r.player_id WHERE r.tours = (SELECT MAX(tours) FROM rankings) LIMIT 1;
SELECT year, COUNT(*) AS match_count FROM matches GROUP BY year ORDER BY match_count DESC LIMIT 1;
SELECT year, COUNT(*) AS match_count FROM matches GROUP BY year ORDER BY match_count DESC LIMIT 1;
SELECT p.player_id, p.first_name || ' ' || p.last_name AS winner_name, m.winner_rank_points FROM players p JOIN matches m ON p.player_id = m.winner_id GROUP BY m.winner_id ORDER BY COUNT(m.winner_id) DESC LIMIT 1;
SELECT p.first_name, p.last_name, SUM(m.winner_rank_points) AS total_rank_points FROM matches m JOIN players p ON m.winner_id = p.player_id GROUP BY m.winner_id ORDER BY total_rank_points DESC LIMIT 1;
SELECT winner_name FROM matches WHERE tourney_name = 'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1;
SELECT winner_name FROM matches WHERE tourney_name = 'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1;
SELECT loser_name, winner_name FROM matches WHERE minutes = (SELECT MAX(minutes) FROM matches);
SELECT winner_name, loser_name FROM matches ORDER BY minutes DESC LIMIT 1;
SELECT p.first_name, AVG(r.ranking) AS average_ranking FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.first_name;
SELECT p.first_name, AVG(r.ranking) AS average_ranking FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.first_name;
SELECT p.first_name, SUM(r.ranking_points) AS total_ranking_points FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.player_id, p.first_name;
SELECT p.first_name, SUM(r.ranking_points) AS total_ranking_points FROM players p JOIN rankings r ON p.player_id = r.player_id GROUP BY p.first_name;
SELECT country_code, COUNT(*) AS player_count FROM players GROUP BY country_code;
SELECT country_code, COUNT(*) AS player_count FROM players GROUP BY country_code;
SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(*) DESC LIMIT 1;
SELECT country_code FROM players GROUP BY country_code HAVING COUNT(*) > 50;
SELECT country_code FROM players GROUP BY country_code HAVING COUNT(*) > 50;
SELECT ranking_date, SUM(tours) AS total_tours FROM rankings GROUP BY ranking_date;
SELECT ranking_date, SUM(tours) AS total_tours FROM rankings GROUP BY ranking_date;
SELECT year, COUNT(match_num) AS match_count FROM matches GROUP BY year;
SELECT year, COUNT(*) AS match_count FROM matches GROUP BY year;
SELECT winner_name, winner_rank FROM matches ORDER BY winner_age ASC LIMIT 3;
SELECT winner_name, winner_rank FROM matches ORDER BY winner_age ASC LIMIT 3;
SELECT COUNT(DISTINCT winner_id) AS distinct_winners FROM matches WHERE tourney_name = 'WTA Championships' AND winner_hand = 'L';
SELECT COUNT(*) AS left_handed_winners_count FROM matches WHERE tourney_name = 'WTA Championships' AND winner_hand = 'L';
SELECT p.first_name, p.country_code, p.birth_date FROM players p JOIN matches m ON p.player_id = m.winner_id WHERE m.winner_rank_points = (SELECT MAX(winner_rank_points) FROM matches);
SELECT p.first_name, p.country_code, p.birth_date FROM players p JOIN matches m ON p.player_id = m.winner_id WHERE m.winner_rank_points = (SELECT MAX(winner_rank_points) FROM matches);
SELECT hand, COUNT(player_id) AS player_count FROM players GROUP BY hand;
SELECT hand, COUNT(player_id) AS player_count FROM players GROUP BY hand;
SELECT COUNT(id) FROM ship WHERE disposition_of_ship = 'Captured';
SELECT name, tonnage FROM ship ORDER BY name DESC;
SELECT name, date, result FROM battle;
SELECT MAX(killed) AS max_death_toll, MIN(killed) AS min_death_toll FROM death;
SELECT AVG(injured) AS average_injuries FROM death;
SELECT death.killed, death.injured FROM death JOIN ship ON death.caused_by_ship_id = ship.id WHERE ship.tonnage = 't';
SELECT name, result FROM battle WHERE bulgarian_commander != 'Boril';
SELECT battle.id, battle.name FROM battle JOIN ship ON battle.id = ship.lost_in_battle WHERE ship.ship_type = 'Brig';
SELECT battle.id, battle.name FROM battle JOIN ship ON battle.id = ship.lost_in_battle JOIN death ON ship.id = death.caused_by_ship_id GROUP BY battle.id HAVING SUM(death.killed) > 10;
SELECT s.id AS ship_id, s.name AS ship_name FROM ship s JOIN death d ON s.id = d.caused_by_ship_id GROUP BY s.id, s.name ORDER BY SUM(d.injured) DESC LIMIT 1;
SELECT DISTINCT name FROM battle WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I';
SELECT COUNT(DISTINCT result) AS distinct_results FROM battle;
SELECT COUNT(DISTINCT b.id) AS battle_count FROM battle AS b LEFT JOIN ship AS s ON b.id = s.lost_in_battle WHERE s.tonnage != '225' OR s.tonnage IS NULL;
SELECT battle.name, battle.date FROM battle JOIN ship AS lost_ship1 ON battle.id = lost_ship1.lost_in_battle JOIN ship AS lost_ship2 ON battle.id = lost_ship2.lost_in_battle WHERE lost_ship1.name = 'Lettice' AND lost_ship2.name = 'HMS Atalanta';
SELECT battle.name, battle.result, battle.bulgarian_commander FROM battle JOIN ship ON battle.id = ship.lost_in_battle WHERE ship.location = 'English Channel' AND ship.lost_in_battle IS NULL;
SELECT note FROM death WHERE note LIKE '%East%';
SELECT line_1, line_2 FROM Addresses;
SELECT line_1, line_2 FROM Addresses;
SELECT COUNT(*) AS total_courses FROM Courses;
SELECT COUNT(course_id) AS course_count FROM Courses;
SELECT course_description FROM Courses WHERE course_name = 'math';
SELECT course_description FROM Courses WHERE course_name LIKE '%math%';
SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea';
SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea';
SELECT d.department_name, d.department_id FROM Departments d JOIN Degree_Programs dp ON d.department_id = dp.department_id GROUP BY d.department_id ORDER BY COUNT(dp.degree_program_id) DESC LIMIT 1;
SELECT d.department_name, d.department_id FROM Departments d JOIN Degree_Programs dp ON d.department_id = dp.department_id GROUP BY d.department_id ORDER BY COUNT(dp.degree_program_id) DESC LIMIT 1;
SELECT COUNT(DISTINCT department_id) AS number_of_departments FROM Degree_Programs;
SELECT COUNT(DISTINCT department_id) AS distinct_departments FROM Degree_Programs;
SELECT COUNT(DISTINCT degree_summary_name) AS distinct_degree_names FROM Degree_Programs;
SELECT COUNT(DISTINCT degree_program_id) AS distinct_degree_count FROM Degree_Programs;
SELECT COUNT(DISTINCT dp.degree_summary_name) AS degree_count FROM Degree_Programs dp JOIN Departments d ON dp.department_id = d.department_id WHERE d.department_name = 'engineering';
SELECT COUNT(DP.degree_program_id) AS degree_count FROM Degree_Programs DP JOIN Departments D ON DP.department_id = D.department_id WHERE D.department_name = 'engineering';
SELECT section_name, section_description FROM Sections;
SELECT section_name, section_description FROM Sections;
SELECT c.course_name, c.course_id FROM Courses AS c JOIN Sections AS s ON c.course_id = s.course_id GROUP BY c.course_id HAVING COUNT(s.section_id) <= 2;
SELECT c.course_id, c.course_name FROM Courses AS c JOIN Sections AS s ON c.course_id = s.course_id GROUP BY c.course_id HAVING COUNT(s.section_id) < 2;
SELECT section_name FROM Sections ORDER BY section_name DESC;
SELECT section_name FROM Sections ORDER BY section_name DESC;
SELECT s.semester_name, s.semester_id FROM Semesters AS s JOIN Student_Enrolment AS se ON s.semester_id = se.semester_id GROUP BY s.semester_id ORDER BY COUNT(se.student_enrolment_id) DESC LIMIT 1;
WITH SemesterCourseCounts AS ( SELECT SEC.student_enrolment_id, C.course_name, C.course_id, COUNT(SEC.student_enrolment_id) AS student_count FROM Student_Enrolment_Courses SEC JOIN Courses C ON SEC.course_id = C.course_id GROUP BY SEC.student_enrolment_id, C.course_id ), MaxStudentCounts AS ( SELECT student_enrolment_id, MAX(student_count) AS max_student_count FROM SemesterCourseCounts GROUP BY student_enrolment_id ) SELECT SCC.student_enrolment_id, S.semester_name, SCC.course_name, SCC.course_id FROM SemesterCourseCounts SCC JOIN MaxStudentCounts MSC ON SCC.student_enrolment_id = MSC.student_enrolment_id AND SCC.student_count = MSC.max_student_count JOIN Semesters S ON SCC.student_enrolment_id = S.semester_id;
SELECT department_description FROM Departments WHERE department_name LIKE '%the computer%';
SELECT department_description FROM Departments WHERE department_name LIKE '%computer%';
SELECT s.student_id, s.first_name, s.middle_name, s.last_name FROM Students s JOIN Student_Enrolment se ON s.student_id = se.student_id GROUP BY s.student_id HAVING COUNT(DISTINCT se.degree_program_id) = 2;
SELECT S.student_id, S.first_name, S.middle_name, S.last_name FROM Students AS S JOIN ( SELECT student_id, semester_id FROM Student_Enrolment GROUP BY student_id, semester_id HAVING COUNT(degree_program_id) = 2 ) AS SE ON S.student_id = SE.student_id;
SELECT Students.first_name, Students.middle_name, Students.last_name FROM Student_Enrolment JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id JOIN Students ON Student_Enrolment.student_id = Students.student_id WHERE Degree_Programs.degree_summary_name = 'Bachelor';
SELECT Students.first_name, Students.middle_name, Students.last_name FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id JOIN Degree_Programs ON Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id WHERE Degree_Programs.degree_summary_name = 'Bachelors';
WITH Program_Enrollment AS ( SELECT degree_program_id, COUNT(student_enrolment_id) AS student_count FROM Student_Enrolment GROUP BY degree_program_id ORDER BY student_count DESC LIMIT 1 ) SELECT dp.degree_summary_name FROM Degree_Programs dp JOIN Program_Enrollment pe ON dp.degree_program_id = pe.degree_program_id;
SELECT dp.degree_summary_name FROM Degree_Programs dp JOIN Student_Enrolment se ON dp.degree_program_id = se.degree_program_id GROUP BY dp.degree_summary_name ORDER BY COUNT(se.student_enrolment_id) DESC LIMIT 1;
SELECT dp.degree_program_id, dp.degree_summary_name FROM Degree_Programs dp JOIN Student_Enrolment se ON dp.degree_program_id = se.degree_program_id GROUP BY dp.degree_program_id ORDER BY COUNT(se.student_enrolment_id) DESC LIMIT 1;
SELECT dp.degree_program_id, dp.degree_summary_name FROM Degree_Programs dp JOIN Student_Enrolment se ON dp.degree_program_id = se.degree_program_id GROUP BY dp.degree_program_id, dp.degree_summary_name ORDER BY COUNT(se.student_enrolment_id) DESC LIMIT 1;
SELECT S.student_id, first_name, middle_name, last_name, COUNT(*) AS number_of_enrollments FROM Students S JOIN Student_Enrolment SE ON S.student_id = SE.student_id GROUP BY S.student_id ORDER BY number_of_enrollments DESC LIMIT 1;
SELECT S.first_name, S.middle_name, S.last_name, S.student_id, COUNT(SE.student_enrolment_id) AS enrollment_count FROM Students S JOIN Student_Enrolment SE ON S.student_id = SE.student_id GROUP BY S.student_id ORDER BY enrollment_count DESC LIMIT 1;
SELECT s.semester_name FROM Semesters s LEFT JOIN Student_Enrolment se ON s.semester_id = se.semester_id WHERE se.student_enrolment_id IS NULL;
SELECT semester_name FROM Semesters WHERE semester_id NOT IN (SELECT semester_id FROM Student_Enrolment);
SELECT course_name FROM Courses WHERE course_id IN (SELECT course_id FROM Student_Enrolment_Courses);
SELECT Courses.course_name FROM Courses JOIN Student_Enrolment_Courses ON Courses.course_id = Student_Enrolment_Courses.course_id GROUP BY Courses.course_name;
SELECT c.course_name FROM Courses c JOIN Student_Enrolment_Courses sec ON c.course_id = sec.course_id GROUP BY c.course_id ORDER BY COUNT(sec.student_course_id) DESC LIMIT 1;
SELECT c.course_name FROM Courses c JOIN Student_Enrolment_Courses sec ON c.course_id = sec.course_id GROUP BY c.course_id ORDER BY COUNT(sec.student_course_id) DESC LIMIT 1;
SELECT Students.last_name FROM Students JOIN Addresses ON Students.current_address_id = Addresses.address_id WHERE Addresses.state_province_county = 'North Carolina' AND Students.student_id NOT IN (SELECT student_id FROM Student_Enrolment);
SELECT Students.last_name FROM Students JOIN Addresses ON Students.current_address_id = Addresses.address_id OR Students.permanent_address_id = Addresses.address_id WHERE Addresses.state_province_county = 'North Carolina' AND Students.student_id NOT IN (SELECT student_id FROM Student_Enrolment);
SELECT t.transcript_date, t.transcript_id FROM Transcripts t JOIN Transcript_Contents tc ON t.transcript_id = tc.transcript_id GROUP BY t.transcript_id HAVING COUNT(tc.student_course_id) >= 2;
SELECT T.transcript_date, T.transcript_id FROM Transcripts AS T JOIN Transcript_Contents AS TC ON T.transcript_id = TC.transcript_id JOIN Student_Enrolment_Courses AS SEC ON TC.student_course_id = SEC.student_course_id GROUP BY T.transcript_id HAVING COUNT(SEC.student_course_id) >= 2;
SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward';
SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward';
SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1;
SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1;
SELECT first_name, middle_name, last_name FROM Students ORDER BY date_left ASC LIMIT 1;
SELECT first_name, middle_name, last_name FROM Students ORDER BY date_left ASC LIMIT 1;
SELECT first_name FROM Students WHERE permanent_address_id != current_address_id;
SELECT first_name FROM Students WHERE current_address_id != permanent_address_id;
SELECT a.address_id, a.line_1, a.line_2, a.line_3 FROM Addresses a JOIN Students s ON a.address_id = s.current_address_id GROUP BY a.address_id, a.line_1, a.line_2, a.line_3 ORDER BY COUNT(s.student_id) DESC LIMIT 1;
SELECT a.address_id, a.line_1, a.line_2 FROM Addresses a JOIN Students s ON a.address_id = s.current_address_id OR a.address_id = s.permanent_address_id JOIN Student_Enrolment_Courses sec ON s.student_id = sec.student_enrolment_id GROUP BY s.student_id ORDER BY COUNT(sec.course_id) DESC LIMIT 1;
SELECT AVG(transcript_date) AS average_transcript_date FROM Transcripts;
SELECT AVG(transcript_date) AS average_transcript_date FROM Transcripts;
SELECT transcript_date, transcript_id FROM Transcripts ORDER BY transcript_date LIMIT 1;
SELECT transcript_date, transcript_id, other_details FROM Transcripts WHERE transcript_date = (SELECT MIN(transcript_date) FROM Transcripts);
SELECT COUNT(*) AS transcript_count FROM Transcripts;
SELECT COUNT(*) AS transcript_count FROM Transcripts;
SELECT MAX(transcript_date) AS latest_transcript_release_date FROM Transcripts;
SELECT MAX(transcript_date) AS latest_transcript_date FROM Transcripts;
SELECT student_course_id, MAX(transcript_count) AS max_transcript_appearances FROM ( SELECT student_course_id, COUNT(DISTINCT transcript_id) AS transcript_count FROM Transcript_Contents GROUP BY student_course_id ) AS subquery GROUP BY student_course_id;
WITH course_counts AS ( SELECT T.student_course_id, SEC.course_id, COUNT(T.transcript_id) AS count FROM Transcript_Contents T JOIN Student_Enrolment_Courses SEC ON T.student_course_id = SEC.student_course_id GROUP BY T.student_course_id, SEC.course_id ) SELECT MAX(count), course_id FROM course_counts GROUP BY course_id ORDER BY MAX(count) DESC LIMIT 1;
SELECT t.transcript_date, t.transcript_id FROM Transcripts AS t JOIN Transcript_Contents AS tc ON t.transcript_id = tc.transcript_id GROUP BY t.transcript_id ORDER BY COUNT(tc.student_course_id) ASC LIMIT 1;
SELECT t.transcript_date, t.transcript_id FROM Transcripts AS t JOIN Transcript_Contents AS tc ON t.transcript_id = tc.transcript_id GROUP BY t.transcript_id ORDER BY COUNT(tc.student_course_id) ASC LIMIT 1;
SELECT semester_id FROM ( SELECT DISTINCT T1.semester_id FROM Student_Enrolment AS T1 INNER JOIN Degree_Programs AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE T2.degree_summary_name = 'Master' INTERSECT SELECT DISTINCT T1.semester_id FROM Student_Enrolment AS T1 INNER JOIN Degree_Programs AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE T2.degree_summary_name = 'Bachelor' );
SELECT semester_id FROM Student_Enrolment AS T1 INNER JOIN Degree_Programs AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE T2.degree_summary_name = 'Masters' INTERSECT SELECT semester_id FROM Student_Enrolment AS T1 INNER JOIN Degree_Programs AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE T2.degree_summary_name = 'Bachelors';
SELECT COUNT(DISTINCT S.current_address_id) AS distinct_current_addresses FROM Students S;
SELECT DISTINCT a.line_1, a.line_2, a.city, a.zip_postcode, a.state_province_county, a.country FROM Addresses AS a JOIN Students AS s ON a.address_id = s.current_address_id OR a.address_id = s.permanent_address_id;
SELECT student_id, current_address_id, permanent_address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details FROM Students ORDER BY last_name DESC;
SELECT student_id, first_name, middle_name, last_name, cell_mobile_number, email_address, ssn, date_first_registered, date_left, other_student_details FROM Students ORDER BY last_name DESC;
SELECT * FROM Sections WHERE section_name = 'h';
SELECT section_description FROM Sections WHERE section_name = 'h';
SELECT Students.first_name FROM Students JOIN Addresses ON Students.permanent_address_id = Addresses.address_id WHERE Addresses.country = 'Haiti' OR Students.cell_mobile_number = '09700166582';
SELECT Students.first_name FROM Students JOIN Addresses ON Students.permanent_address_id = Addresses.address_id WHERE Addresses.country = 'Haiti' OR Students.cell_mobile_number = '09700166582';
SELECT Title FROM Cartoon ORDER BY Title ASC;
SELECT Title FROM Cartoon ORDER BY Title ASC;
SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones';
SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones';
SELECT COUNT(*) FROM Cartoon WHERE Written_by = 'Joseph Kuhr';
SELECT COUNT(id) AS number_of_cartoons FROM Cartoon WHERE Written_by = 'Joseph Kuhr';
SELECT Title, Directed_by, Original_air_date FROM Cartoon ORDER BY Original_air_date;
SELECT Title, Directed_by FROM Cartoon WHERE Channel = 'Cartoon' ORDER BY Original_air_date;
SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti';
SELECT Title FROM Cartoon WHERE Directed_by = 'Ben Jones' OR Directed_by = 'Brandon Vietti';
SELECT Country, COUNT(id) AS Number_of_TV_Channels FROM TV_Channel GROUP BY Country ORDER BY Number_of_TV_Channels DESC LIMIT 1;
SELECT Country, COUNT(id) AS Channel_Count FROM TV_Channel GROUP BY Country ORDER BY Channel_Count DESC LIMIT 1;
SELECT COUNT(DISTINCT series_name) AS distinct_series_names, COUNT(DISTINCT Content) AS distinct_contents FROM TV_Channel;
SELECT COUNT(DISTINCT series_name) AS distinct_series_count, COUNT(DISTINCT Content) AS distinct_content_count FROM TV_Channel;
SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio';
SELECT Content FROM TV_Channel WHERE series_name = 'Sky Radio';
SELECT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio';
SELECT Package_Option FROM TV_Channel WHERE series_name = 'Sky Radio';
SELECT COUNT(*) AS english_channel_count FROM TV_Channel WHERE Language = 'English';
SELECT COUNT(*) AS english_channel_count FROM TV_Channel WHERE Language = 'English';
SELECT Language, COUNT(*) AS Channel_Count FROM TV_Channel GROUP BY Language ORDER BY Channel_Count ASC LIMIT 1;
SELECT Language, COUNT(id) AS Channel_Count FROM TV_Channel GROUP BY Language ORDER BY Channel_Count ASC LIMIT 1;
SELECT Language, COUNT(id) AS Number_of_Channels FROM TV_Channel GROUP BY Language;
SELECT Language, COUNT(id) AS TV_Channel_Count FROM TV_Channel GROUP BY Language;
SELECT TV_Channel.series_name FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Title = 'The Rise of the Blue Beetle!';
SELECT TV_Channel.series_name FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Title = 'The Rise of the Blue Beetle';
SELECT Cartoon.Title FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE TV_Channel.series_name = 'Sky Radio';
SELECT Cartoon.Title FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE TV_Channel.series_name = 'Sky Radio';
SELECT Episode FROM TV_series ORDER BY Rating;
SELECT Episode, Rating FROM TV_series ORDER BY Rating;
SELECT Episode, Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;
SELECT Episode, Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;
SELECT min(Share) AS Minimum_Share, max(Share) AS Maximum_Share FROM TV_series;
SELECT MAX(Share) AS max_share, MIN(Share) AS min_share FROM TV_series;
SELECT Air_Date FROM TV_series WHERE Episode = 'A Love of a Lifetime';
SELECT Air_Date FROM TV_series WHERE Episode = 'A Love of a Lifetime' LIMIT 1;
SELECT Weekly_Rank FROM TV_series WHERE Episode = 'A Love of a Lifetime';
SELECT Weekly_Rank FROM TV_series WHERE Episode = 'A Love of a Lifetime' LIMIT 1;
SELECT TV_Channel.series_name FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_series.Episode = 'A Love of a Lifetime';
SELECT T2.series_name FROM TV_series AS T1 JOIN TV_Channel AS T2 ON T1.Channel = T2.id WHERE T1.Episode = 'A Love of a Lifetime';
SELECT TV_series.Episode FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_Channel.series_name = 'Sky Radio';
SELECT TV_series.Episode FROM TV_series JOIN TV_Channel ON TV_series.Channel = TV_Channel.id WHERE TV_Channel.series_name = 'Sky Radio';
SELECT Directed_by, COUNT(id) AS Number_of_Cartoons FROM Cartoon GROUP BY Directed_by;
SELECT Directed_by, COUNT(id) AS Cartoon_Count FROM Cartoon GROUP BY Directed_by;
SELECT Production_code, Channel FROM Cartoon ORDER BY Original_air_date DESC LIMIT 1;
SELECT Production_code, Channel FROM Cartoon ORDER BY Original_air_date DESC LIMIT 1;
SELECT Package_Option, series_name FROM TV_Channel WHERE Hight_definition_TV = 'yes';
SELECT Package_Option, series_name FROM TV_Channel WHERE Hight_definition_TV = 'yes';
SELECT DISTINCT TV_Channel.Country FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Written_by = 'Todd Casey';
SELECT TV_Channel.Country FROM Cartoon JOIN TV_Channel ON Cartoon.Channel = TV_Channel.id WHERE Cartoon.Written_by = 'Todd Casey';
SELECT DISTINCT TV_Channel.Country FROM TV_Channel LEFT JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Written_by != 'Todd Casey' OR Cartoon.Written_by IS NULL;
SELECT DISTINCT TV_Channel.Country FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Written_by != 'Todd Casey';
SELECT TV_Channel.series_name, TV_Channel.Country FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Directed_by = 'Ben Jones' OR Cartoon.Directed_by = 'Michael Chang';
SELECT TV_Channel.series_name, TV_Channel.Country FROM TV_Channel JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Directed_by = 'Ben Jones' OR Cartoon.Directed_by = 'Michael Chang';
SELECT Pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE Language != 'English';
SELECT Pixel_aspect_ratio_PAR, Country FROM TV_Channel WHERE Language != 'English';
SELECT id FROM TV_Channel WHERE Country IN (SELECT Country FROM TV_Channel GROUP BY Country HAVING COUNT(id) > 2);
SELECT TV_Channel.id FROM TV_Channel JOIN TV_series ON TV_Channel.id = TV_series.Channel GROUP BY TV_series.Channel HAVING COUNT(TV_series.Channel) > 2;
SELECT TC.id FROM TV_Channel AS TC WHERE TC.id NOT IN (SELECT C.Channel FROM Cartoon AS C WHERE C.Directed_by = 'Ben Jones');
SELECT TV_Channel.id FROM TV_Channel WHERE TV_Channel.id NOT IN (SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones');
SELECT Package_Option FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones');
SELECT DISTINCT TV_Channel.Package_Option FROM TV_Channel LEFT JOIN Cartoon ON TV_Channel.id = Cartoon.Channel WHERE Cartoon.Directed_by != 'Ben Jones' OR Cartoon.Channel IS NULL;
SELECT COUNT(*) AS poker_player_count FROM poker_player;
SELECT COUNT(*) AS poker_player_count FROM poker_player;
SELECT Earnings FROM poker_player ORDER BY Earnings DESC;
SELECT Earnings FROM poker_player ORDER BY Earnings DESC;
SELECT Final_Table_Made, Best_Finish FROM poker_player;
SELECT Final_Table_Made, Best_Finish FROM poker_player;
SELECT AVG(Earnings) AS average_earnings FROM poker_player;
SELECT AVG(Earnings) AS average_earnings FROM poker_player;
SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1;
SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1;
SELECT MAX(Final_Table_Made) AS max_final_table_made FROM poker_player WHERE Earnings < 200000;
SELECT MAX(Final_Table_Made) AS max_final_table_made FROM poker_player WHERE Earnings < 200000;
SELECT people.Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID;
SELECT people.Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID;
SELECT people.Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID WHERE poker_player.Earnings > 300000;
SELECT people.Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID WHERE poker_player.Earnings > 300000;
SELECT people.Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY poker_player.Final_Table_Made ASC;
SELECT people.Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY poker_player.Final_Table_Made ASC;
SELECT p.Birth_Date FROM people p JOIN poker_player pp ON p.People_ID = pp.People_ID WHERE pp.Earnings = (SELECT MIN(Earnings) FROM poker_player);
SELECT people.Birth_Date FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY poker_player.Earnings LIMIT 1;
SELECT t2.Money_Rank FROM people AS t1 JOIN poker_player AS t2 ON t1.People_ID = t2.People_ID WHERE t1.Height = (SELECT MAX(Height) FROM people);
SELECT pp.Money_Rank FROM poker_player AS pp JOIN people AS p ON pp.People_ID = p.People_ID WHERE p.Height = (SELECT MAX(Height) FROM people);
SELECT AVG(poker_player.Earnings) AS Average_Earnings FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE people.Height > 200;
SELECT AVG(poker_player.Earnings) FROM poker_player JOIN people ON poker_player.People_ID = people.People_ID WHERE people.Height > 200;
SELECT people.Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY poker_player.Earnings DESC;
SELECT people.Name FROM people JOIN poker_player ON people.People_ID = poker_player.People_ID ORDER BY poker_player.Earnings DESC;
SELECT Nationality, COUNT(People_ID) AS Number_of_People FROM people GROUP BY Nationality;
SELECT Nationality, COUNT(*) AS People_Count FROM people GROUP BY Nationality;
SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(Nationality) DESC LIMIT 1;
SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(Nationality) DESC LIMIT 1;
SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(Nationality) >= 2;
SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(Nationality) >= 2;
SELECT Name, Birth_Date FROM people ORDER BY Name ASC;
SELECT Name, Birth_Date FROM people ORDER BY Name;
SELECT Name FROM people WHERE Nationality != 'Russia';
SELECT Name FROM people WHERE Nationality != 'Russia';
SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player);
SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player);
SELECT COUNT(DISTINCT Nationality) AS distinct_nationalities FROM people;
SELECT COUNT(DISTINCT Nationality) AS distinct_nationalities FROM people;
SELECT COUNT(DISTINCT state) AS total_states FROM AREA_CODE_STATE;
SELECT contestant_number, contestant_name FROM CONTESTANTS ORDER BY contestant_name DESC;
SELECT vote_id, phone_number, state FROM VOTES;
SELECT MAX(area_code) AS max_area_code, MIN(area_code) AS min_area_code FROM AREA_CODE_STATE;
SELECT MAX(created) AS last_creation_date FROM VOTES WHERE state = 'CA';
SELECT contestant_name FROM CONTESTANTS WHERE contestant_name != 'Jessie Alloway';
SELECT DISTINCT state, created FROM VOTES;
SELECT C.contestant_number, C.contestant_name FROM CONTESTANTS AS C JOIN VOTES AS V ON C.contestant_number = V.contestant_number GROUP BY C.contestant_number HAVING COUNT(V.vote_id) >= 2;
SELECT c.contestant_number, c.contestant_name FROM CONTESTANTS AS c JOIN VOTES AS v ON c.contestant_number = v.contestant_number GROUP BY c.contestant_number, c.contestant_name ORDER BY COUNT(v.vote_id) ASC LIMIT 1;
SELECT COUNT(*) AS vote_count FROM VOTES WHERE state IN ('NY', 'CA');
SELECT COUNT(*) AS contestant_count_without_votes FROM CONTESTANTS WHERE contestant_number NOT IN (SELECT contestant_number FROM VOTES);
SELECT T1.area_code FROM AREA_CODE_STATE AS T1 INNER JOIN VOTES AS T2 ON T1.state = T2.state GROUP BY T1.area_code ORDER BY COUNT(T2.vote_id) DESC LIMIT 1;
SELECT VOTES.created, VOTES.state, VOTES.phone_number FROM VOTES JOIN CONTESTANTS ON VOTES.contestant_number = CONTESTANTS.contestant_number WHERE CONTESTANTS.contestant_name = 'Tabatha Gehling';
SELECT DISTINCT a.area_code FROM AREA_CODE_STATE a JOIN VOTES v1 ON a.state = v1.state JOIN VOTES v2 ON a.state = v2.state JOIN CONTESTANTS c1 ON v1.contestant_number = c1.contestant_number JOIN CONTESTANTS c2 ON v2.contestant_number = c2.contestant_number WHERE c1.contestant_name = 'Tabatha Gehling' AND c2.contestant_name = 'Kelly Clauss';
SELECT contestant_name FROM CONTESTANTS WHERE contestant_name LIKE '%Al%';
SELECT Name FROM country WHERE IndepYear > 1950;
SELECT Name FROM country WHERE IndepYear > 1950;
SELECT COUNT(*) AS republic_count FROM country WHERE GovernmentForm = 'Republic';
SELECT COUNT(*) AS republic_count FROM country WHERE GovernmentForm = 'Republic';
SELECT SUM(SurfaceArea) AS TotalSurfaceArea FROM country WHERE Region = 'Caribbean';
SELECT SUM(SurfaceArea) AS TotalSurfaceArea FROM country WHERE Continent = 'Caribbean';
SELECT Continent FROM country WHERE Code = 'AIA';
SELECT Continent FROM country WHERE Name = 'Anguilla';
SELECT c.Region FROM city AS ci JOIN country AS c ON ci.CountryCode = c.Code WHERE ci.Name = 'Kabul';
SELECT c.Region FROM city AS ci JOIN country AS c ON ci.CountryCode = c.Code WHERE ci.Name = 'Kabul';
SELECT Language FROM countrylanguage WHERE CountryCode = 'ARU' ORDER BY Percentage DESC LIMIT 1;
SELECT Language, Percentage FROM countrylanguage WHERE CountryCode = 'ABW' ORDER BY Percentage DESC LIMIT 1;
SELECT Population, LifeExpectancy FROM country WHERE Code = 'BRA';
SELECT Population, LifeExpectancy FROM country WHERE Code = 'BRA';
SELECT Region, Population FROM country WHERE Name = 'Angola';
SELECT Region, Population FROM country WHERE Name = 'Angola';
SELECT AVG(LifeExpectancy) AS AverageLifeExpectancy FROM country WHERE Region = 'Central Africa';
SELECT AVG(LifeExpectancy) AS AverageLifeExpectancy FROM country WHERE Continent = 'Africa' AND Region = 'Central Africa';
SELECT Name FROM country WHERE Continent = 'Asia' ORDER BY LifeExpectancy ASC LIMIT 1;
SELECT Name FROM country WHERE Continent = 'Asia' ORDER BY LifeExpectancy ASC LIMIT 1;
SELECT SUM(Population) AS Total_Population, MAX(GNP) AS Max_GNP FROM country WHERE Continent = 'Asia';
SELECT SUM(Population) AS TotalPopulation, MAX(GNP) AS LargestGNP FROM country WHERE Continent = 'Asia';
SELECT AVG(LifeExpectancy) AS AverageLifeExpectancy FROM country WHERE Continent = 'Africa' AND GovernmentForm = 'Republic';
SELECT AVG(LifeExpectancy) AS AverageLifeExpectancy FROM country WHERE Continent = 'Africa' AND GovernmentForm = 'Republic';
SELECT SUM(SurfaceArea) AS TotalSurfaceArea FROM country WHERE Continent IN ('Asia', 'Europe');
SELECT SUM(SurfaceArea) AS TotalSurfaceArea FROM country WHERE Continent IN ('Asia', 'Europe');
SELECT SUM(Population) AS Total_Population FROM city WHERE District = 'Gelderland';
SELECT SUM(Population) AS Total_Population FROM city WHERE District = 'Gelderland';
SELECT AVG(GNP) AS average_gnp, SUM(Population) AS total_population FROM country WHERE GovernmentForm = 'US territory';
SELECT AVG(GNP) AS Mean_GNP, SUM(Population) AS Total_Population FROM country WHERE Name LIKE '%US Territory%';
SELECT COUNT(DISTINCT Language) AS unique_language_count FROM countrylanguage;
SELECT COUNT(DISTINCT Language) AS distinct_language_count FROM countrylanguage;
SELECT COUNT(DISTINCT GovernmentForm) AS distinct_government_forms FROM country WHERE Continent = 'Africa';
SELECT COUNT(DISTINCT GovernmentForm) AS UniqueGovernmentForms FROM country WHERE Continent = 'Africa';
SELECT COUNT(DISTINCT Language) AS total_languages FROM countrylanguage WHERE CountryCode = 'ABW';
SELECT COUNT(DISTINCT Language) AS language_count FROM countrylanguage WHERE CountryCode = 'ABW';
SELECT COUNT(DISTINCT Language) AS NumberOfOfficialLanguages FROM countrylanguage WHERE CountryCode = 'AFG' AND IsOfficial = 'T';
SELECT COUNT(DISTINCT Language) AS OfficialLanguagesCount FROM countrylanguage WHERE CountryCode = 'AFG' AND IsOfficial = 'T';
SELECT c.Name FROM country AS c JOIN ( SELECT CountryCode, COUNT(DISTINCT Language) AS LangCount FROM countrylanguage GROUP BY CountryCode ORDER BY LangCount DESC LIMIT 1 ) AS cl ON c.Code = cl.CountryCode;
SELECT c.Name FROM country AS c JOIN countrylanguage AS cl ON c.Code = cl.CountryCode GROUP BY c.Code ORDER BY COUNT(DISTINCT cl.Language) DESC LIMIT 1;
SELECT c.Continent, COUNT(DISTINCT cl.Language) AS LanguageCount FROM country AS c JOIN countrylanguage AS cl ON c.Code = cl.CountryCode GROUP BY c.Continent ORDER BY LanguageCount DESC LIMIT 1;
SELECT c.Continent, COUNT(DISTINCT cl.Language) AS LanguageCount FROM country AS c JOIN countrylanguage AS cl ON c.Code = cl.CountryCode GROUP BY c.Continent ORDER BY LanguageCount DESC LIMIT 1;
SELECT COUNT(DISTINCT cl1.CountryCode) AS CountryCount FROM countrylanguage cl1 JOIN countrylanguage cl2 ON cl1.CountryCode = cl2.CountryCode WHERE cl1.Language = 'English' AND cl2.Language = 'Dutch';
SELECT COUNT(DISTINCT t1.CountryCode) AS NumberOfCountries FROM countrylanguage AS t1 WHERE t1.Language = 'English' INTERSECT SELECT CountryCode FROM countrylanguage WHERE Language = 'Dutch';
SELECT c.Name FROM country AS c JOIN countrylanguage AS cl1 ON c.Code = cl1.CountryCode JOIN countrylanguage AS cl2 ON c.Code = cl2.CountryCode WHERE cl1.Language = 'English' AND cl2.Language = 'French';
SELECT c.Name FROM country AS c JOIN countrylanguage AS cl ON c.Code = cl.CountryCode WHERE cl.Language IN ('English', 'French') GROUP BY c.Name HAVING COUNT(DISTINCT cl.Language) = 2;
SELECT c.Name FROM country AS c JOIN countrylanguage AS cl ON c.Code = cl.CountryCode WHERE cl.Language = 'English' INTERSECT SELECT c.Name FROM country AS c JOIN countrylanguage AS cl ON c.Code = cl.CountryCode WHERE cl.Language = 'French';
SELECT c.Name FROM country AS c JOIN countrylanguage AS cl1 ON c.Code = cl1.CountryCode JOIN countrylanguage AS cl2 ON c.Code = cl2.CountryCode WHERE cl1.Language = 'English' AND cl1.IsOfficial = 'T' AND cl2.Language = 'French' AND cl2.IsOfficial = 'T';
SELECT COUNT(DISTINCT c.Continent) AS distinct_continents FROM country AS c JOIN countrylanguage AS cl ON c.Code = cl.CountryCode WHERE cl.Language = 'Chinese';
SELECT COUNT(DISTINCT c.Continent) AS continent_count FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE cl.Language = 'Chinese';
SELECT c.Region FROM country AS c JOIN countrylanguage AS cl ON c.Code = cl.CountryCode WHERE cl.Language IN ('English', 'Dutch');
SELECT DISTINCT c.Region FROM country AS c JOIN countrylanguage AS cl ON c.Code = cl.CountryCode WHERE cl.Language IN ('Dutch', 'English');
SELECT c.Name FROM country AS c JOIN countrylanguage AS cl ON c.Code = cl.CountryCode WHERE cl.IsOfficial = 'T' AND (cl.Language = 'English' OR cl.Language = 'Dutch');
SELECT c.Name FROM country AS c JOIN countrylanguage AS cl ON c.Code = cl.CountryCode WHERE cl.IsOfficial = 'T' AND (cl.Language = 'English' OR cl.Language = 'Dutch');
SELECT cl.Language, SUM(cl.Percentage) AS TotalPercentage FROM country AS c JOIN countrylanguage AS cl ON c.Code = cl.CountryCode WHERE c.Continent = 'Asia' GROUP BY cl.Language ORDER BY TotalPercentage DESC LIMIT 1;
SELECT cl.Language, COUNT(DISTINCT c.Code) AS NumberOfCountries FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE c.Continent = 'Asia' GROUP BY cl.Language ORDER BY NumberOfCountries DESC LIMIT 1;
SELECT cl.Language FROM countrylanguage AS cl JOIN country AS c ON cl.CountryCode = c.Code WHERE c.GovernmentForm = 'Republic' GROUP BY cl.Language HAVING COUNT(cl.CountryCode) = 1;
SELECT cl.Language FROM countrylanguage AS cl JOIN country AS c ON cl.CountryCode = c.Code WHERE c.GovernmentForm = 'Republic' GROUP BY cl.Language HAVING COUNT(cl.CountryCode) = 1;
SELECT c.Name FROM city AS c JOIN country AS co ON c.CountryCode = co.Code JOIN countrylanguage AS cl ON cl.CountryCode = co.Code WHERE cl.Language = 'English' ORDER BY c.Population DESC LIMIT 1;
SELECT c.Name, c.Population FROM city AS c JOIN countrylanguage AS cl ON c.CountryCode = cl.CountryCode WHERE cl.Language = 'English' ORDER BY c.Population DESC LIMIT 1;
SELECT Name, Population, LifeExpectancy FROM country WHERE Continent = 'Asia' ORDER BY SurfaceArea DESC LIMIT 1;
SELECT Name, Population, LifeExpectancy FROM country WHERE Continent = 'Asia' ORDER BY SurfaceArea DESC LIMIT 1;
SELECT AVG(c.LifeExpectancy) AS AverageLifeExpectancy FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.IsOfficial = 'F';
SELECT AVG(c.LifeExpectancy) AS MeanLifeExpectancy FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE cl.Language = 'English' AND cl.IsOfficial != 'T';
SELECT SUM(T1.Population) AS Total_Population FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language != 'English';
SELECT SUM(T1.Population) AS TotalPopulation FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language != 'English' AND T2.IsOfficial = 'T';
SELECT cl.Language FROM country AS c JOIN countrylanguage AS cl ON c.Code = cl.CountryCode WHERE c.HeadOfState = 'Beatrix' AND cl.IsOfficial = 'T';
SELECT cl.Language FROM country AS c JOIN countrylanguage AS cl ON c.Code = cl.CountryCode WHERE c.HeadOfState = 'Beatrix' AND cl.IsOfficial = 'T';
SELECT COUNT(DISTINCT cl.Language) AS unique_official_languages FROM countrylanguage AS cl JOIN country AS c ON cl.CountryCode = c.Code WHERE cl.IsOfficial = 'T' AND c.IndepYear < 1930;
SELECT COUNT(DISTINCT cl.Language) AS distinct_official_languages FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE c.IndepYear < 1930 AND cl.IsOfficial = 'T';
SELECT Name FROM country WHERE Continent != 'Europe' AND SurfaceArea > (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Europe');
SELECT Name FROM country WHERE SurfaceArea > (SELECT MAX(SurfaceArea) FROM country WHERE Continent = 'Europe');
SELECT Name FROM country WHERE Continent = 'Africa' AND Population < (SELECT MAX(Population) FROM country WHERE Continent = 'Asia');
SELECT c1.Name FROM country AS c1 WHERE c1.Continent = 'Africa' AND EXISTS (SELECT 1 FROM country AS c2 WHERE c2.Continent = 'Asia' AND c1.Population < c2.Population);
SELECT Name FROM country WHERE Continent = 'Asia' AND Population > (SELECT MAX(Population) FROM country WHERE Continent = 'Africa');
SELECT Name FROM country WHERE Continent = 'Asia' AND Population > (SELECT MAX(Population) FROM country WHERE Continent = 'Africa');
SELECT c.Code FROM country AS c JOIN countrylanguage AS cl ON c.Code = cl.CountryCode WHERE cl.Language != 'English' OR (cl.Language = 'English' AND cl.IsOfficial = 'F');
SELECT c.Code FROM country AS c LEFT JOIN countrylanguage AS cl ON c.Code = cl.CountryCode WHERE cl.Language != 'English' OR (cl.Language = 'English' AND cl.IsOfficial != 'T') GROUP BY c.Code;
SELECT CountryCode FROM countrylanguage WHERE Language != 'English';
SELECT DISTINCT t1.CountryCode FROM countrylanguage AS t1 WHERE t1.Language != 'English';
SELECT c.Code FROM country AS c JOIN countrylanguage AS cl ON c.Code = cl.CountryCode WHERE cl.Language != 'English' AND c.GovernmentForm != 'Republic';
SELECT cl.CountryCode FROM countrylanguage AS cl JOIN country AS c ON cl.CountryCode = c.Code WHERE cl.Language != 'English' AND c.GovernmentForm != 'Republic';
SELECT c.Name FROM city AS c JOIN country AS co ON c.CountryCode = co.Code JOIN countrylanguage AS cl ON co.Code = cl.CountryCode WHERE co.Continent = 'Europe' AND (cl.Language = 'English' AND cl.IsOfficial = 'F') OR cl.Language != 'English';
SELECT c.Name FROM city AS c JOIN country AS co ON c.CountryCode = co.Code JOIN countrylanguage AS cl ON co.Code = cl.CountryCode WHERE co.Continent = 'Europe' AND cl.Language = 'English' AND cl.IsOfficial = 'F';
SELECT DISTINCT c.Name AS CityName FROM city AS c JOIN country AS co ON c.CountryCode = co.Code JOIN countrylanguage AS cl ON co.Code = cl.CountryCode WHERE co.Continent = 'Asia' AND cl.Language = 'Chinese' AND cl.IsOfficial = 'T';
SELECT DISTINCT c.Name FROM city AS c JOIN country AS co ON c.CountryCode = co.Code JOIN countrylanguage AS cl ON co.Code = cl.CountryCode WHERE co.Continent = 'Asia' AND cl.Language = 'Chinese' AND cl.IsOfficial = 'T';
SELECT Name, IndepYear, SurfaceArea FROM country WHERE Population = (SELECT MIN(Population) FROM country);
SELECT Name, IndepYear, SurfaceArea FROM country WHERE Population = (SELECT MIN(Population) FROM country);
SELECT Population, Name, HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1;
SELECT Name, Population, HeadOfState FROM country WHERE SurfaceArea = (SELECT MAX(SurfaceArea) FROM country);
SELECT c.Name, COUNT(DISTINCT cl.Language) AS NumberOfLanguages FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode GROUP BY c.Code HAVING COUNT(DISTINCT cl.Language) >= 3;
SELECT c.Name, COUNT(DISTINCT cl.Language) AS NumLanguages FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode GROUP BY c.Code HAVING COUNT(DISTINCT cl.Language) > 2;
SELECT District, COUNT(*) AS NumberOfCities FROM city WHERE Population > (SELECT AVG(Population) FROM city) GROUP BY District;
WITH avg_population AS (SELECT AVG(Population) as avg_pop FROM city), filtered_cities AS (SELECT District, Population FROM city WHERE Population > (SELECT avg_pop FROM avg_population)) SELECT District, COUNT(*) as city_count FROM filtered_cities GROUP BY District;
SELECT GovernmentForm, SUM(Population) AS Total_Population FROM country GROUP BY GovernmentForm HAVING AVG(LifeExpectancy) > 72;
SELECT GovernmentForm, SUM(Population) AS TotalPopulation FROM country WHERE LifeExpectancy > 72 GROUP BY GovernmentForm;
SELECT Continent, AVG(LifeExpectancy) AS AvgLifeExpectancy, SUM(Population) AS TotalPopulation FROM country GROUP BY Continent HAVING AVG(LifeExpectancy) < 72;
SELECT Continent, SUM(Population) AS Total_Population, AVG(LifeExpectancy) AS Average_Life_Expectancy FROM country GROUP BY Continent HAVING AVG(LifeExpectancy) < 72;
SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5;
SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5;
SELECT Name FROM country ORDER BY Population DESC LIMIT 3;
SELECT Name FROM country ORDER BY Population DESC LIMIT 3;
SELECT Name FROM country ORDER BY Population ASC LIMIT 3;
SELECT Name FROM country ORDER BY Population ASC LIMIT 3;
SELECT COUNT(Code) AS Asia_Country_Count FROM country WHERE Continent = 'Asia';
SELECT COUNT(Code) AS Asia_Country_Count FROM country WHERE Continent = 'Asia';
SELECT Name FROM country WHERE Continent = 'Europe' AND Population = 80000;
SELECT Name FROM country WHERE Continent = 'Europe' AND Population = 80000;
SELECT SUM(Population) AS Total_Population, AVG(SurfaceArea) AS Average_Area FROM country WHERE Continent = 'North America' AND SurfaceArea > 3000;
SELECT SUM(Population) AS Total_Population, AVG(SurfaceArea) AS Average_Surface_Area FROM country WHERE Continent = 'North America' AND SurfaceArea > 3000;
SELECT Name FROM city WHERE Population BETWEEN 160000 AND 900000;
SELECT Name FROM city WHERE Population BETWEEN 160000 AND 900000;
SELECT Language, COUNT(DISTINCT CountryCode) AS CountryCount FROM countrylanguage GROUP BY Language ORDER BY CountryCount DESC LIMIT 1;
SELECT Language FROM countrylanguage GROUP BY Language ORDER BY COUNT(DISTINCT CountryCode) DESC LIMIT 1;
SELECT c.Name AS CountryName, cl.Language AS LanguageWithHighestPercentage, cl.Percentage FROM countrylanguage cl JOIN country c ON cl.CountryCode = c.Code WHERE (cl.CountryCode, cl.Percentage) IN (SELECT CountryCode, MAX(Percentage) FROM countrylanguage GROUP BY CountryCode);
SELECT c.Code AS CountryCode, cl.Language FROM country c JOIN countrylanguage cl ON c.Code = cl.CountryCode WHERE (c.Code, cl.Percentage) IN (SELECT CountryCode, MAX(Percentage) FROM countrylanguage GROUP BY CountryCode);
WITH max_spanish_percentage AS (SELECT MAX(Percentage) AS max_percentage FROM countrylanguage WHERE Language = 'Spanish') SELECT COUNT(*) AS num_countries, cl.CountryCode FROM countrylanguage cl JOIN (SELECT CountryCode FROM countrylanguage WHERE Percentage = (SELECT max_percentage FROM max_spanish_percentage)) msp ON cl.CountryCode = msp.CountryCode AND cl.Language = 'Spanish' GROUP BY cl.CountryCode;
SELECT COUNT(DISTINCT CountryCode) AS SpanishSpeakingCountries FROM countrylanguage WHERE Language = 'Spanish';
SELECT c.Code FROM country AS c JOIN countrylanguage AS cl ON c.Code = cl.CountryCode WHERE cl.Language = 'Spanish' ORDER BY cl.Percentage DESC;
SELECT cl.CountryCode FROM countrylanguage AS cl WHERE cl.Language = 'Spanish' AND cl.Percentage > 49;
SELECT COUNT(*) AS conductor_count FROM conductor;
SELECT COUNT(*) AS conductor_count FROM conductor;
SELECT Name FROM conductor ORDER BY Age ASC;
SELECT Name FROM conductor ORDER BY Age;
SELECT Name FROM conductor WHERE Nationality != 'USA';
SELECT Name FROM conductor WHERE Nationality != 'USA';
SELECT Record_Company FROM orchestra WHERE Orchestra = 'Orchestra' ORDER BY Year_of_Founded DESC;
SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC;
SELECT AVG(Attendance) AS average_attendance FROM show;
SELECT AVG(Attendance) AS average_attendance FROM show;
SELECT MAX(Share) AS max_share, MIN(Share) AS min_share FROM performance WHERE Type != 'Live final';
SELECT MAX(Share) AS max_share, MIN(Share) AS min_share FROM performance WHERE Type != 'Live final';
SELECT COUNT(DISTINCT Nationality) AS distinct_nationalities FROM conductor;
SELECT COUNT(DISTINCT Nationality) AS distinct_nationalities FROM conductor;
SELECT Name FROM conductor ORDER BY Year_of_Work DESC;
SELECT Name FROM conductor ORDER BY Year_of_Work DESC;
SELECT Name FROM conductor WHERE Year_of_Work = (SELECT MAX(Year_of_Work) FROM conductor);
SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1;
SELECT conductor.Name, orchestra.Orchestra FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID;
SELECT conductor.Name, orchestra.Orchestra FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID;
SELECT c.Name FROM conductor AS c JOIN orchestra AS o ON c.Conductor_ID = o.Conductor_ID GROUP BY c.Conductor_ID HAVING COUNT(DISTINCT o.Orchestra) > 1;
SELECT c.Name FROM conductor AS c JOIN orchestra AS o ON c.Conductor_ID = o.Conductor_ID GROUP BY c.Name HAVING COUNT(o.Orchestra_ID) > 1;
SELECT c.Name FROM conductor AS c JOIN orchestra AS o ON c.Conductor_ID = o.Conductor_ID GROUP BY c.Name ORDER BY COUNT(o.Orchestra_ID) DESC LIMIT 1;
SELECT conductor.Name FROM conductor JOIN orchestra ON conductor.Conductor_ID = orchestra.Conductor_ID GROUP BY conductor.Name ORDER BY COUNT(orchestra.Orchestra_ID) DESC LIMIT 1;
SELECT DISTINCT c.Name FROM conductor AS c JOIN orchestra AS o ON c.Conductor_ID = o.Conductor_ID WHERE o.Year_of_Founded > 2008;
SELECT DISTINCT c.Name FROM conductor AS c JOIN orchestra AS o ON c.Conductor_ID = o.Conductor_ID WHERE o.Year_of_Founded > 2008;
SELECT Record_Company, COUNT(Orchestra_ID) AS Number_of_Orchestras FROM orchestra GROUP BY Record_Company;
SELECT Record_Company, COUNT(Orchestra_ID) AS Orchestra_Count FROM orchestra GROUP BY Record_Company;
SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(Major_Record_Format) ASC;
SELECT Major_Record_Format, COUNT(*) AS Frequency FROM orchestra GROUP BY Major_Record_Format ORDER BY Frequency DESC;
SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(Orchestra_ID) DESC LIMIT 1;
SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(Record_Company) DESC LIMIT 1;
SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance);
SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance);
SELECT Record_Company FROM orchestra WHERE Year_of_Founded < 2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded > 2003;
SELECT Record_Company FROM orchestra WHERE Year_of_Founded < 2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded > 2003;
SELECT COUNT(*) AS orchestra_count FROM orchestra WHERE Major_Record_Format = 'CD' OR Major_Record_Format = 'DVD';
SELECT COUNT(*) AS orchestra_count FROM orchestra WHERE Major_Record_Format IN ('CD', 'DVD');
SELECT o.Year_of_Founded FROM orchestra AS o JOIN performance AS p ON o.Orchestra_ID = p.Orchestra_ID GROUP BY o.Year_of_Founded HAVING COUNT(p.Performance_ID) > 1;
SELECT orchestra.Year_of_Founded FROM orchestra JOIN performance ON orchestra.Orchestra_ID = performance.Orchestra_ID GROUP BY orchestra.Orchestra_ID HAVING COUNT(performance.Performance_ID) > 1;
SELECT COUNT(*) AS highschooler_count FROM Highschooler;
SELECT COUNT(*) AS highschooler_count FROM Highschooler;
SELECT name, grade FROM Highschooler;
SELECT name, grade FROM Highschooler;
SELECT grade FROM Highschooler;
SELECT grade FROM Highschooler;
SELECT grade FROM Highschooler WHERE name = 'Kyle';
SELECT grade FROM Highschooler WHERE name = 'Kyle';
SELECT name FROM Highschooler WHERE grade = 10;
SELECT name FROM Highschooler WHERE grade = 10;
SELECT ID FROM Highschooler WHERE name = 'Kyle';
SELECT ID FROM Highschooler WHERE name = 'Kyle';
SELECT COUNT(*) FROM Highschooler WHERE grade = 9 OR grade = 10;
SELECT COUNT(*) FROM Highschooler WHERE grade = '9' OR grade = '10';
SELECT grade, COUNT(ID) AS number_of_highschoolers FROM Highschooler GROUP BY grade;
SELECT grade, COUNT(ID) AS number_of_highschoolers FROM Highschooler GROUP BY grade;
SELECT grade FROM Highschooler GROUP BY grade ORDER BY COUNT(*) DESC LIMIT 1;
SELECT grade FROM Highschooler GROUP BY grade ORDER BY COUNT(*) DESC LIMIT 1;
SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(*) >= 4;
SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(*) >= 4;
SELECT F.student_id, COUNT(F.friend_id) AS number_of_friends FROM Friend F GROUP BY F.student_id;
SELECT Highschooler.ID, COUNT(Friend.friend_id) AS number_of_friends FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID;
SELECT h.name, COUNT(f.student_id) AS number_of_friends FROM Highschooler h LEFT JOIN Friend f ON h.ID = f.student_id GROUP BY h.ID;
SELECT Highschooler.name, COUNT(Friend.student_id) AS number_of_friends FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.student_id GROUP BY Highschooler.ID;
SELECT h1.name FROM Highschooler h1 JOIN Friend f ON h1.ID = f.student_id OR h1.ID = f.friend_id GROUP BY h1.ID ORDER BY COUNT(h1.ID) DESC LIMIT 1;
SELECT h1.name FROM Highschooler h1 JOIN Friend f ON h1.ID = f.student_id GROUP BY h1.ID ORDER BY COUNT(f.friend_id) DESC LIMIT 1;
SELECT h.name FROM Highschooler h JOIN ( SELECT student_id, COUNT(*) AS friend_count FROM Friend GROUP BY student_id ) f ON h.ID = f.student_id WHERE f.friend_count >= 3;
SELECT h1.name FROM Highschooler h1 JOIN Friend f ON h1.ID = f.student_id GROUP BY h1.ID HAVING COUNT(DISTINCT f.friend_id) >= 3;
SELECT h2.name FROM Highschooler h1 JOIN Friend f ON h1.ID = f.student_id JOIN Highschooler h2 ON f.friend_id = h2.ID WHERE h1.name = 'Kyle';
SELECT h2.name FROM Highschooler h1 JOIN Friend f ON h1.ID = f.student_id JOIN Highschooler h2 ON f.friend_id = h2.ID WHERE h1.name = 'Kyle';
SELECT COUNT(f.friend_id) AS number_of_friends FROM Friend f JOIN Highschooler h ON f.student_id = h.ID WHERE h.name = 'Kyle';
SELECT COUNT(f.friend_id) AS number_of_friends FROM Friend f JOIN Highschooler h ON f.student_id = h.ID WHERE h.name = 'Kyle';
SELECT ID FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend UNION SELECT friend_id FROM Friend);
SELECT ID FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend UNION SELECT friend_id FROM Friend);
SELECT name FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend UNION SELECT friend_id FROM Friend) AND grade = 12;
SELECT name FROM Highschooler WHERE ID NOT IN (SELECT student_id FROM Friend UNION SELECT friend_id FROM Friend);
SELECT h1.ID FROM Highschooler AS h1 JOIN Friend AS f ON h1.ID = f.student_id OR h1.ID = f.friend_id JOIN Likes AS l ON h1.ID = l.liked_id WHERE h1.grade BETWEEN 9 AND 12;
SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes;
SELECT h1.name FROM Highschooler h1 WHERE EXISTS (SELECT 1 FROM Friend f WHERE f.student_id = h1.ID OR f.friend_id = h1.ID) AND EXISTS (SELECT 1 FROM Likes l WHERE l.liked_id = h1.ID);
SELECT h1.name FROM Highschooler h1 WHERE EXISTS (SELECT * FROM Friend f WHERE f.student_id = h1.ID) AND EXISTS (SELECT * FROM Likes l WHERE l.student_id = h1.ID);
SELECT student_id, COUNT(liked_id) AS like_count FROM Likes GROUP BY student_id;
SELECT student_id, COUNT(*) AS like_count FROM Likes GROUP BY student_id;
SELECT h.name, COUNT(l.student_id) AS number_of_likes FROM Highschooler h JOIN Likes l ON h.ID = l.student_id GROUP BY h.name;
SELECT Highschooler.name, COUNT(Likes.student_id) AS number_of_likes FROM Highschooler JOIN Likes ON Highschooler.ID = Likes.student_id GROUP BY Highschooler.name;
SELECT h.name FROM Highschooler h JOIN Likes l ON h.ID = l.student_id GROUP BY l.student_id ORDER BY COUNT(l.student_id) DESC LIMIT 1;
SELECT h.name FROM Highschooler h JOIN Likes l ON h.ID = l.student_id GROUP BY h.ID ORDER BY COUNT(l.student_id) DESC LIMIT 1;
SELECT h1.name FROM Highschooler h1 JOIN Likes l ON h1.ID = l.student_id GROUP BY h1.name HAVING COUNT(l.student_id) >= 2;
SELECT h.name FROM Highschooler AS h JOIN Likes AS l ON h.ID = l.student_id GROUP BY h.ID HAVING COUNT(l.student_id) >= 2;
SELECT h1.name FROM Highschooler h1 JOIN Friend f ON h1.ID = f.student_id WHERE h1.grade > 5 GROUP BY h1.ID, h1.name HAVING COUNT(f.friend_id) >= 2;
SELECT h1.name FROM Highschooler h1 JOIN Friend f ON h1.ID = f.student_id WHERE h1.grade > 5 GROUP BY h1.ID HAVING COUNT(f.friend_id) >= 2;
SELECT COUNT(L.student_id) AS like_count FROM Likes L JOIN Highschooler H ON L.student_id = H.ID WHERE H.name = 'Kyle';
SELECT COUNT(l.student_id) AS like_count FROM Likes l JOIN Highschooler h ON l.student_id = h.ID WHERE h.name = 'Kyle';
SELECT AVG(grade) AS average_grade FROM Highschooler WHERE ID IN (SELECT student_id FROM Friend UNION SELECT friend_id FROM Friend);
SELECT AVG(T1.grade) AS average_grade FROM Highschooler AS T1 JOIN Friend AS T2 ON T1.ID = T2.student_id OR T1.ID = T2.friend_id GROUP BY T1.ID HAVING COUNT(DISTINCT T2.student_id) > 0;
SELECT MIN(T1.grade) AS min_grade FROM Highschooler AS T1 LEFT JOIN Friend AS T2 ON T1.ID = T2.student_id OR T1.ID = T2.friend_id WHERE T2.student_id IS NULL AND T2.friend_id IS NULL;
SELECT MIN(T1.grade) AS lowest_grade FROM Highschooler AS T1 LEFT JOIN Friend AS T2 ON T1.ID = T2.student_id OR T1.ID = T2.friend_id WHERE T2.student_id IS NULL AND T2.friend_id IS NULL;
SELECT o.state FROM Owners AS o JOIN Professionals AS p ON o.state = p.state GROUP BY o.state HAVING COUNT(DISTINCT o.owner_id) > 0 AND COUNT(DISTINCT p.professional_id) > 0;
SELECT DISTINCT o.state FROM Owners o JOIN Professionals p ON o.state = p.state;
SELECT AVG(Dogs.age) AS average_age FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id;
SELECT AVG(Dogs.age) AS average_age FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id;
SELECT p.professional_id, p.last_name, p.cell_number FROM Professionals p JOIN Treatments t ON p.professional_id = t.professional_id WHERE p.state = 'Indiana' GROUP BY p.professional_id HAVING COUNT(t.treatment_id) > 2 OR p.state = 'Indiana';
SELECT P.professional_id, P.last_name, P.cell_number FROM Professionals AS P JOIN Treatments AS T ON P.professional_id = T.professional_id WHERE P.state = 'Indiana' OR (SELECT COUNT(*) FROM Treatments WHERE professional_id = P.professional_id) > 2;
SELECT d.name FROM Dogs d JOIN Treatments t ON d.dog_id = t.dog_id GROUP BY d.name HAVING MAX(t.cost_of_treatment) <= 1000;
SELECT d.name FROM Dogs d JOIN Treatments t ON d.dog_id = t.dog_id GROUP BY d.dog_id HAVING SUM(t.cost_of_treatment) <= 1000;
SELECT DISTINCT first_name FROM Professionals WHERE role_code IN ('Veterenarian', 'Employee') UNION SELECT DISTINCT first_name FROM Owners EXCEPT SELECT name AS first_name FROM Dogs;
SELECT DISTINCT first_name FROM Owners UNION SELECT DISTINCT first_name FROM Professionals EXCEPT SELECT name AS first_name FROM Dogs;
SELECT professional_id, role_code, email_address FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments);
SELECT professional_id, role_code, email_address FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments);
SELECT o.owner_id, o.first_name, o.last_name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id GROUP BY o.owner_id ORDER BY COUNT(d.dog_id) DESC LIMIT 1;
SELECT o.owner_id, o.first_name, o.last_name FROM Owners AS o JOIN Dogs AS d ON o.owner_id = d.owner_id GROUP BY o.owner_id ORDER BY COUNT(d.dog_id) DESC LIMIT 1;
SELECT Professionals.professional_id, Professionals.role_code AS role, Professionals.first_name FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id GROUP BY Professionals.professional_id HAVING COUNT(Treatments.treatment_id) >= 2;
SELECT Professionals.professional_id, Professionals.role_code, Professionals.first_name FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id GROUP BY Professionals.professional_id HAVING COUNT(Treatments.treatment_id) >= 2;
SELECT b.breed_name FROM Breeds b JOIN Dogs d ON b.breed_code = d.breed_code GROUP BY b.breed_name ORDER BY COUNT(d.dog_id) DESC LIMIT 1;
SELECT breed_name FROM Breeds INNER JOIN Dogs ON Breeds.breed_code = Dogs.breed_code GROUP BY breed_name ORDER BY COUNT(Dogs.dog_id) DESC LIMIT 1;
SELECT o.owner_id, o.last_name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id JOIN Treatments t ON d.dog_id = t.dog_id GROUP BY o.owner_id ORDER BY COUNT(t.treatment_id) DESC LIMIT 1;
SELECT o.owner_id, o.last_name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id JOIN Treatments t ON d.dog_id = t.dog_id GROUP BY o.owner_id ORDER BY SUM(t.cost_of_treatment) DESC LIMIT 1;
SELECT tt.treatment_type_description FROM Treatment_Types AS tt JOIN Treatments AS t ON tt.treatment_type_code = t.treatment_type_code GROUP BY tt.treatment_type_code ORDER BY SUM(t.cost_of_treatment) ASC LIMIT 1;
SELECT tt.treatment_type_description FROM Treatment_Types AS tt JOIN Treatments AS t ON tt.treatment_type_code = t.treatment_type_code GROUP BY tt.treatment_type_code ORDER BY SUM(t.cost_of_treatment) ASC LIMIT 1;
SELECT o.owner_id, o.zip_code FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id JOIN Treatments t ON d.dog_id = t.dog_id GROUP BY o.owner_id ORDER BY SUM(t.cost_of_treatment) DESC LIMIT 1;
SELECT o.owner_id, o.zip_code FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id JOIN Treatments t ON d.dog_id = t.dog_id GROUP BY o.owner_id, o.zip_code ORDER BY SUM(t.cost_of_treatment) DESC LIMIT 1;
SELECT p.professional_id, p.cell_number FROM Professionals p JOIN Treatments t ON p.professional_id = t.professional_id GROUP BY p.professional_id HAVING COUNT(DISTINCT t.treatment_type_code) >= 2;
SELECT Professionals.professional_id, Professionals.cell_number FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id GROUP BY Professionals.professional_id HAVING COUNT(DISTINCT Treatments.treatment_type_code) >= 2;
SELECT Professionals.first_name, Professionals.last_name FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id WHERE Treatments.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments);
SELECT Professionals.first_name, Professionals.last_name FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id WHERE Treatments.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments);
SELECT Treatments.date_of_treatment, Professionals.first_name FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id;
SELECT Treatments.date_of_treatment, Professionals.first_name FROM Treatments JOIN Professionals ON Treatments.professional_id = Professionals.professional_id;
SELECT Treatments.cost_of_treatment, Treatment_Types.treatment_type_description FROM Treatments JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code;
SELECT Treatments.cost_of_treatment, Treatment_Types.treatment_type_description FROM Treatments JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code;
SELECT Owners.first_name, Owners.last_name, Sizes.size_description FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Sizes ON Dogs.size_code = Sizes.size_code;
SELECT Owners.first_name, Owners.last_name, Sizes.size_description FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id JOIN Sizes ON Dogs.size_code = Sizes.size_code;
SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id;
SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id;
WITH RarestBreed AS ( SELECT b.breed_code, COUNT(d.dog_id) AS dog_count FROM Breeds b JOIN Dogs d ON b.breed_code = d.breed_code GROUP BY b.breed_code ORDER BY dog_count ASC LIMIT 1 ), RarestBreedDogs AS ( SELECT d.dog_id, d.name FROM RarestBreed rb JOIN Dogs d ON rb.breed_code = d.breed_code ) SELECT rd.name, t.date_of_treatment FROM RarestBreedDogs rd JOIN Treatments t ON rd.dog_id = t.dog_id;
WITH RareBreeds AS ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY COUNT(*) ASC LIMIT 1 ) SELECT d.name, t.date_of_treatment FROM Dogs d JOIN Treatments t ON d.dog_id = t.dog_id WHERE d.breed_code IN (SELECT breed_code FROM RareBreeds);
SELECT Owners.first_name, Dogs.name FROM Dogs JOIN Owners ON Dogs.owner_id = Owners.owner_id WHERE Owners.state = 'Virginia';
SELECT Owners.first_name, Dogs.name FROM Owners JOIN Dogs ON Owners.owner_id = Dogs.owner_id WHERE Owners.state = 'Virginia';
SELECT Dogs.date_arrived, Dogs.date_departed FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id;
SELECT Dogs.date_arrived, Dogs.date_departed FROM Dogs JOIN Treatments ON Dogs.dog_id = Treatments.dog_id;
SELECT o.last_name FROM Owners AS o JOIN Dogs AS d ON o.owner_id = d.owner_id WHERE d.age = (SELECT MIN(age) FROM Dogs);
SELECT o.last_name FROM Owners o JOIN Dogs d ON o.owner_id = d.owner_id WHERE d.date_of_birth = (SELECT MIN(date_of_birth) FROM Dogs);
SELECT email_address FROM Professionals WHERE state = 'Hawaii' OR state = 'Wisconsin';
SELECT email_address FROM Professionals WHERE state IN ('Hawaii', 'Wisconsin');
SELECT date_arrived, date_departed FROM Dogs;
SELECT date_arrived, date_departed FROM Dogs;
SELECT COUNT(DISTINCT dog_id) AS number_of_dogs_with_treatment FROM Treatments;
SELECT COUNT(DISTINCT dog_id) AS number_of_dogs FROM Treatments;
SELECT COUNT(DISTINCT professional_id) AS professional_count FROM Treatments WHERE dog_id IN (SELECT dog_id FROM Dogs);
SELECT COUNT(DISTINCT professional_id) AS number_of_professionals FROM Treatments;
SELECT role_code, street, city, state FROM Professionals WHERE city LIKE '%West%';
SELECT role_code AS role, street, city, state FROM Professionals WHERE city LIKE '%West%';
SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%';
SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%';
WITH AvgAge AS (SELECT AVG(age) AS avg_age FROM Dogs) SELECT COUNT(*) FROM Dogs WHERE age < (SELECT avg_age FROM AvgAge);
SELECT COUNT(*) AS dog_count FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs);
SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1;
SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1;
SELECT COUNT(dog_id) AS count_of_dogs_without_treatment FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments);
SELECT COUNT(dog_id) AS count_of_dogs_without_treatment FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments);
SELECT COUNT(owner_id) AS owner_count_without_dogs FROM Owners WHERE owner_id NOT IN (SELECT DISTINCT owner_id FROM Dogs);
SELECT COUNT(owner_id) AS count_of_owners_without_dogs FROM Owners WHERE owner_id NOT IN (SELECT owner_id FROM Dogs);
SELECT COUNT(*) AS no_treatment_professionals FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments);
SELECT COUNT(*) AS count_of_professionals_without_dog_treatments FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments);
SELECT name, age, weight FROM Dogs WHERE abandoned_yn = '1';
SELECT name, age, weight FROM Dogs WHERE abandoned_yn = '1';
SELECT AVG(age) AS average_age FROM Dogs;
SELECT AVG(age) AS average_age FROM Dogs;
SELECT MAX(age) AS oldest_dog_age FROM Dogs;
SELECT MAX(age) AS oldest_dog_age FROM Dogs;
SELECT charge_type, charge_amount FROM Charges GROUP BY charge_type;
SELECT charge_type, charge_amount FROM Charges GROUP BY charge_type;
SELECT MAX(charge_amount) AS max_charge_amount FROM Charges;
SELECT MAX(charge_amount) AS charge_amount FROM Charges;
SELECT email_address, cell_number, home_phone FROM Professionals;
SELECT email_address, cell_number, home_phone FROM Professionals;
SELECT DISTINCT b.breed_name, s.size_description FROM Breeds b CROSS JOIN Sizes s;
SELECT DISTINCT b.breed_name, s.size_description FROM Breeds b JOIN Dogs d ON b.breed_code = d.breed_code JOIN Sizes s ON d.size_code = s.size_code;
SELECT Professionals.first_name, Treatment_Types.treatment_type_description FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code;
SELECT Professionals.first_name, Treatment_Types.treatment_type_description FROM Professionals JOIN Treatments ON Professionals.professional_id = Treatments.professional_id JOIN Treatment_Types ON Treatments.treatment_type_code = Treatment_Types.treatment_type_code;
SELECT COUNT(*) AS singer_count FROM singer;
SELECT COUNT(*) AS singer_count FROM singer;
SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC;
SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC;
SELECT Birth_Year, Citizenship FROM singer;
SELECT Birth_Year, Citizenship FROM singer;
SELECT Name FROM singer WHERE Citizenship != 'France';
SELECT Name FROM singer WHERE Citizenship != 'France';
SELECT Name FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949;
SELECT Name FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949;
SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1;
SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1;
SELECT Citizenship, COUNT(Singer_ID) AS Singer_Count FROM singer GROUP BY Citizenship;
SELECT Citizenship, COUNT(Singer_ID) AS Singer_Count FROM singer GROUP BY Citizenship;
SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(Citizenship) DESC LIMIT 1;
SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(Citizenship) DESC LIMIT 1;
SELECT Citizenship, MAX(Net_Worth_Millions) AS Max_Net_Worth FROM singer GROUP BY Citizenship;
SELECT Citizenship, MAX(Net_Worth_Millions) AS Max_Net_Worth FROM singer GROUP BY Citizenship;
SELECT song.Title, singer.Name FROM song JOIN singer ON song.Singer_ID = singer.Singer_ID;
SELECT song.Title, singer.Name FROM song JOIN singer ON song.Singer_ID = singer.Singer_ID;
SELECT DISTINCT s.Name FROM singer AS s JOIN song AS sg ON s.Singer_ID = sg.Singer_ID WHERE sg.Sales > 300000;
SELECT DISTINCT s.Name FROM singer AS s JOIN song AS so ON s.Singer_ID = so.Singer_ID WHERE so.Sales > 300000;
SELECT singer.Name FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Singer_ID HAVING COUNT(song.Song_ID) > 1;
SELECT s.Name FROM singer AS s JOIN song AS so ON s.Singer_ID = so.Singer_ID GROUP BY s.Singer_ID HAVING COUNT(so.Song_ID) > 1;
SELECT singer.Name, SUM(song.Sales) AS Total_Sales FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Singer_ID;
SELECT singer.Name, SUM(song.Sales) AS Total_Sales FROM singer JOIN song ON singer.Singer_ID = song.Singer_ID GROUP BY singer.Name;
SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song);
SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song);
SELECT Citizenship FROM singer WHERE Birth_Year < 1945 AND Birth_Year > 1955;
SELECT Citizenship FROM singer WHERE Birth_Year < 1945 AND Birth_Year > 1955;
SELECT COUNT(*) AS total_features FROM Other_Available_Features;
SELECT Ref_Feature_Types.feature_type_name FROM Other_Available_Features JOIN Ref_Feature_Types ON Other_Available_Features.feature_type_code = Ref_Feature_Types.feature_type_code WHERE Other_Available_Features.feature_name = 'AirCon';
SELECT property_type_description FROM Ref_Property_Types WHERE property_type_code IS NOT NULL;
SELECT property_name FROM Properties WHERE (property_type_code = 'House' OR property_type_code = 'Apartment') AND room_count > 1;
